(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{"+ZQX":function(n,s){n.exports='<form [formGroup]="form" (ngSubmit)="submit()">\n  <formly-form [model]="model" [fields]="fields" [options]="options" [form]="form"></formly-form>\n  <button type="submit" class="btn btn-primary submit-button" [disabled]="!form.valid">Submit</button>\n</form>\n'},"/GUq":function(n,s){n.exports="import { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFormOptions, FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyJsonschema } from '@ngx-formly/core/json-schema';\n\n@Component({\n  selector: 'formly-app-example',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  form = new FormGroup({});\n  model: any = {\n    firstName: 'Chuck',\n    lastName: 'Norris',\n    age: 75,\n    bio: 'Roundhouse kicking asses since 1940',\n    password: 'noneed',\n  };\n  options: FormlyFormOptions = {};\n\n  fields: FormlyFieldConfig[] = [this.formlyJsonschema.toFieldConfig({\n    'title': 'A registration form',\n    'description': 'A simple form example.',\n    'type': 'object',\n    'required': [\n      'firstName',\n      'lastName',\n    ],\n    'properties': {\n      'firstName': {\n        'type': 'string',\n        'title': 'First name',\n      },\n      'lastName': {\n        'type': 'string',\n        'title': 'Last name',\n      },\n      'age': {\n        'type': 'integer',\n        'title': 'Age',\n      },\n      'bio': {\n        'type': 'string',\n        'title': 'Bio',\n      },\n      'password': {\n        'type': 'string',\n        'title': 'Password',\n        'minLength': 3,\n      },\n      'telephone': {\n        'type': 'string',\n        'title': 'Telephone',\n        'minLength': 10,\n      },\n    },\n  })];\n\n  constructor(private formlyJsonschema: FormlyJsonschema) {}\n\n  submit() {\n    alert(JSON.stringify(this.model));\n  }\n}\n"},"31Ni":function(n,s){n.exports='<form [formGroup]="form" (ngSubmit)="submit()">\n  <formly-form [model]="model" [fields]="fields" [options]="options" [form]="form"></formly-form>\n  <button type="submit" class="btn btn-primary submit-button" [disabled]="!form.valid">Submit</button>\n</form>\n'},"3Tvo":function(n,s){n.exports='<span class="hljs-tag">&lt;<span class="hljs-name">form</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">"form"</span> (<span class="hljs-attr">ngSubmit</span>)=<span class="hljs-string">"submit()"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">formly-form</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span> [<span class="hljs-attr">fields</span>]=<span class="hljs-string">"fields"</span> [<span class="hljs-attr">options</span>]=<span class="hljs-string">"options"</span> [<span class="hljs-attr">form</span>]=<span class="hljs-string">"form"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">formly-form</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary submit-button"</span> [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">"!form.valid"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n'},"3i2D":function(n,s){n.exports='import { Component } from \'@angular/core\';\nimport { FieldArrayType } from \'@ngx-formly/core\';\n\n@Component({\n  selector: \'formly-array-type\',\n  template: `\n    <legend *ngIf="to.label">{{ to.label }}</legend>\n    <div *ngFor="let field of field.fieldGroup;let i = index;" class="row">\n      <formly-field class="col-sm-10" [field]="field"></formly-field>\n      <div class="col-sm-2">\n        <button class="btn btn-danger" type="button" (click)="remove(i)">Remove</button>\n      </div>\n    </div>\n    <div class="text-right">\n      <button class="btn btn-primary" type="button" (click)="add()">Add</button>\n    </div>\n  `,\n})\nexport class ArrayTypeComponent extends FieldArrayType {}\n'},"6Uo4":function(n,s){n.exports='<span class="hljs-keyword">import</span> { NgModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { CommonModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/common\'</span>;\n<span class="hljs-keyword">import</span> { ReactiveFormsModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { FormlyModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n<span class="hljs-keyword">import</span> { FormlyBootstrapModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/bootstrap\'</span>;\n<span class="hljs-keyword">import</span> { AppComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./app.component\'</span>;\n<span class="hljs-keyword">import</span> { ArrayTypeComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./array.type\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minlengthValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`Should have atleast <span class="hljs-subst">${field.templateOptions.minLength}</span> characters`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxlengthValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be less than <span class="hljs-subst">${field.templateOptions.maxLength}</span> characters`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be more than <span class="hljs-subst">${field.templateOptions.min}</span>`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be less than <span class="hljs-subst">${field.templateOptions.max}</span>`</span>;\n}\n\n<span class="hljs-meta">@NgModule</span>({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: <span class="hljs-string">\'required\'</span>, message: <span class="hljs-string">\'This field is required\'</span> },\n        { name: <span class="hljs-string">\'minlength\'</span>, message: minlengthValidationMessage },\n        { name: <span class="hljs-string">\'maxlength\'</span>, message: maxlengthValidationMessage },\n        { name: <span class="hljs-string">\'min\'</span>, message: minValidationMessage },\n        { name: <span class="hljs-string">\'max\'</span>, message: maxValidationMessage },\n      ],\n      types: [\n        { name: <span class="hljs-string">\'string\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span> },\n        {\n          name: <span class="hljs-string">\'number\'</span>,\n          <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span>,\n          defaultOptions: {\n            templateOptions: {\n              <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n            },\n          },\n        },\n        {\n          name: <span class="hljs-string">\'integer\'</span>,\n          <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span>,\n          defaultOptions: {\n            templateOptions: {\n              <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n            },\n          },\n        },\n        { name: <span class="hljs-string">\'object\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'formly-group\'</span> },\n        { name: <span class="hljs-string">\'boolean\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'checkbox\'</span> },\n        { name: <span class="hljs-string">\'array\'</span>, component: ArrayTypeComponent },\n        { name: <span class="hljs-string">\'enum\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'select\'</span> },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppModule { }\n'},APLF:function(n,s){n.exports='<form [formGroup]="form" (ngSubmit)="submit()">\n  <formly-form [model]="model" [fields]="fields" [options]="options" [form]="form"></formly-form>\n  <button type="submit" class="btn btn-primary submit-button" [disabled]="!form.valid">Submit</button>\n</form>\n'},AqAy:function(n,s){n.exports='<span class="hljs-tag">&lt;<span class="hljs-name">form</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">"form"</span> (<span class="hljs-attr">ngSubmit</span>)=<span class="hljs-string">"submit()"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">formly-form</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span> [<span class="hljs-attr">fields</span>]=<span class="hljs-string">"fields"</span> [<span class="hljs-attr">options</span>]=<span class="hljs-string">"options"</span> [<span class="hljs-attr">form</span>]=<span class="hljs-string">"form"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">formly-form</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary submit-button"</span> [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">"!form.valid"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n'},Bzvg:function(n,s){n.exports='<span class="hljs-tag">&lt;<span class="hljs-name">form</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">"form"</span> (<span class="hljs-attr">ngSubmit</span>)=<span class="hljs-string">"submit()"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">formly-form</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span> [<span class="hljs-attr">fields</span>]=<span class="hljs-string">"fields"</span> [<span class="hljs-attr">options</span>]=<span class="hljs-string">"options"</span> [<span class="hljs-attr">form</span>]=<span class="hljs-string">"form"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">formly-form</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary submit-button"</span> [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">"!form.valid"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n'},CT9U:function(n,s){n.exports='<span class="hljs-keyword">import</span> { NgModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { CommonModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/common\'</span>;\n<span class="hljs-keyword">import</span> { ReactiveFormsModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { FormlyModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n<span class="hljs-keyword">import</span> { FormlyBootstrapModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/bootstrap\'</span>;\n<span class="hljs-keyword">import</span> { AppComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./app.component\'</span>;\n<span class="hljs-keyword">import</span> { ArrayTypeComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./array.type\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minlengthValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`Should have atleast <span class="hljs-subst">${field.templateOptions.minLength}</span> characters`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxlengthValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be less than <span class="hljs-subst">${field.templateOptions.maxLength}</span> characters`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be more than <span class="hljs-subst">${field.templateOptions.min}</span>`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be less than <span class="hljs-subst">${field.templateOptions.max}</span>`</span>;\n}\n\n<span class="hljs-meta">@NgModule</span>({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: <span class="hljs-string">\'required\'</span>, message: <span class="hljs-string">\'This field is required\'</span> },\n        { name: <span class="hljs-string">\'minlength\'</span>, message: minlengthValidationMessage },\n        { name: <span class="hljs-string">\'maxlength\'</span>, message: maxlengthValidationMessage },\n        { name: <span class="hljs-string">\'min\'</span>, message: minValidationMessage },\n        { name: <span class="hljs-string">\'max\'</span>, message: maxValidationMessage },\n      ],\n      types: [\n        { name: <span class="hljs-string">\'string\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span> },\n        {\n          name: <span class="hljs-string">\'number\'</span>,\n          <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span>,\n          defaultOptions: {\n            templateOptions: {\n              <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n            },\n          },\n        },\n        {\n          name: <span class="hljs-string">\'integer\'</span>,\n          <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span>,\n          defaultOptions: {\n            templateOptions: {\n              <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n            },\n          },\n        },\n        { name: <span class="hljs-string">\'object\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'formly-group\'</span> },\n        { name: <span class="hljs-string">\'boolean\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'checkbox\'</span> },\n        { name: <span class="hljs-string">\'array\'</span>, component: ArrayTypeComponent },\n        { name: <span class="hljs-string">\'enum\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'select\'</span> },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppModule { }\n'},CVVk:function(n,s){n.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FormGroup } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { FormlyFormOptions, FormlyFieldConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n<span class="hljs-keyword">import</span> { FormlyJsonschema } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core/json-schema\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'formly-app-example\'</span>,\n  templateUrl: <span class="hljs-string">\'./app.component.html\'</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent {\n  form = <span class="hljs-keyword">new</span> FormGroup({});\n  model: <span class="hljs-built_in">any</span> = {\n    firstName: <span class="hljs-string">\'Chuck\'</span>,\n    lastName: <span class="hljs-string">\'Norris\'</span>,\n    age: <span class="hljs-number">75</span>,\n    bio: <span class="hljs-string">\'Roundhouse kicking asses since 1940\'</span>,\n    password: <span class="hljs-string">\'noneed\'</span>,\n  };\n  options: FormlyFormOptions = {};\n\n  fields: FormlyFieldConfig[] = [<span class="hljs-keyword">this</span>.formlyJsonschema.toFieldConfig({\n    <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'A registration form\'</span>,\n    <span class="hljs-string">\'description\'</span>: <span class="hljs-string">\'A simple form example.\'</span>,\n    <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'object\'</span>,\n    <span class="hljs-string">\'required\'</span>: [\n      <span class="hljs-string">\'firstName\'</span>,\n      <span class="hljs-string">\'lastName\'</span>,\n    ],\n    <span class="hljs-string">\'properties\'</span>: {\n      <span class="hljs-string">\'firstName\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'string\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'First name\'</span>,\n      },\n      <span class="hljs-string">\'lastName\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'string\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Last name\'</span>,\n      },\n      <span class="hljs-string">\'age\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'integer\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Age\'</span>,\n      },\n      <span class="hljs-string">\'bio\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'string\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Bio\'</span>,\n      },\n      <span class="hljs-string">\'password\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'string\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Password\'</span>,\n        <span class="hljs-string">\'minLength\'</span>: <span class="hljs-number">3</span>,\n      },\n      <span class="hljs-string">\'telephone\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'string\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Telephone\'</span>,\n        <span class="hljs-string">\'minLength\'</span>: <span class="hljs-number">10</span>,\n      },\n    },\n  })];\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> formlyJsonschema: FormlyJsonschema</span>) {}\n\n  submit() {\n    alert(<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-keyword">this</span>.model));\n  }\n}\n'},EUjJ:function(n,s){n.exports='<form [formGroup]="form" (ngSubmit)="submit()">\n  <formly-form [model]="model" [fields]="fields" [options]="options" [form]="form"></formly-form>\n  <button type="submit" class="btn btn-primary submit-button" [disabled]="!form.valid">Submit</button>\n</form>\n'},IIV6:function(n,s){n.exports='<span class="hljs-keyword">import</span> { NgModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { CommonModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/common\'</span>;\n<span class="hljs-keyword">import</span> { ReactiveFormsModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { FormlyModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n<span class="hljs-keyword">import</span> { FormlyBootstrapModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/bootstrap\'</span>;\n<span class="hljs-keyword">import</span> { AppComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./app.component\'</span>;\n<span class="hljs-keyword">import</span> { ArrayTypeComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./array.type\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minlengthValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`Should have atleast <span class="hljs-subst">${field.templateOptions.minLength}</span> characters`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxlengthValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be less than <span class="hljs-subst">${field.templateOptions.maxLength}</span> characters`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be more than <span class="hljs-subst">${field.templateOptions.min}</span>`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be less than <span class="hljs-subst">${field.templateOptions.max}</span>`</span>;\n}\n\n<span class="hljs-meta">@NgModule</span>({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: <span class="hljs-string">\'required\'</span>, message: <span class="hljs-string">\'This field is required\'</span> },\n        { name: <span class="hljs-string">\'minlength\'</span>, message: minlengthValidationMessage },\n        { name: <span class="hljs-string">\'maxlength\'</span>, message: maxlengthValidationMessage },\n        { name: <span class="hljs-string">\'min\'</span>, message: minValidationMessage },\n        { name: <span class="hljs-string">\'max\'</span>, message: maxValidationMessage },\n      ],\n      types: [\n        { name: <span class="hljs-string">\'string\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span> },\n        {\n          name: <span class="hljs-string">\'number\'</span>,\n          <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span>,\n          defaultOptions: {\n            templateOptions: {\n              <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n            },\n          },\n        },\n        {\n          name: <span class="hljs-string">\'integer\'</span>,\n          <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span>,\n          defaultOptions: {\n            templateOptions: {\n              <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n            },\n          },\n        },\n        { name: <span class="hljs-string">\'object\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'formly-group\'</span> },\n        { name: <span class="hljs-string">\'boolean\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'checkbox\'</span> },\n        { name: <span class="hljs-string">\'array\'</span>, component: ArrayTypeComponent },\n        { name: <span class="hljs-string">\'enum\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'select\'</span> },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppModule { }\n'},IUSh:function(n,s){n.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FieldArrayType } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'formly-array-type\'</span>,\n  template: <span class="hljs-string">`\n    &lt;legend *ngIf="to.label"&gt;{{ to.label }}&lt;/legend&gt;\n    &lt;div *ngFor="let field of field.fieldGroup;let i = index;" class="row"&gt;\n      &lt;formly-field class="col-sm-10" [field]="field"&gt;&lt;/formly-field&gt;\n      &lt;div class="col-sm-2"&gt;\n        &lt;button class="btn btn-danger" type="button" (click)="remove(i)"&gt;Remove&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class="text-right"&gt;\n      &lt;button class="btn btn-primary" type="button" (click)="add()"&gt;Add&lt;/button&gt;\n    &lt;/div&gt;\n  `</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> ArrayTypeComponent <span class="hljs-keyword">extends</span> FieldArrayType {}\n'},"KOT/":function(n,s){n.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FormGroup } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { FormlyFormOptions, FormlyFieldConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n<span class="hljs-keyword">import</span> { FormlyJsonschema } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core/json-schema\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'formly-app-example\'</span>,\n  templateUrl: <span class="hljs-string">\'./app.component.html\'</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent {\n  form = <span class="hljs-keyword">new</span> FormGroup({});\n  model: <span class="hljs-built_in">any</span> = {\n    <span class="hljs-string">\'listOfStrings\'</span>: [\n      <span class="hljs-string">\'foo\'</span>,\n      <span class="hljs-string">\'bar\'</span>,\n      <span class="hljs-string">\'bazinga\'</span>,\n    ],\n    <span class="hljs-string">\'multipleChoicesList\'</span>: [\n      <span class="hljs-string">\'foo\'</span>,\n      <span class="hljs-string">\'bar\'</span>,\n    ],\n    <span class="hljs-string">\'fixedItemsList\'</span>: [\n      <span class="hljs-string">\'Some text\'</span>,\n      <span class="hljs-literal">true</span>,\n      <span class="hljs-number">123</span>,\n    ],\n    <span class="hljs-comment">// \'minItemsList\': [</span>\n    <span class="hljs-comment">//   {</span>\n    <span class="hljs-comment">//     \'name\': \'Default name\',</span>\n    <span class="hljs-comment">//   },</span>\n    <span class="hljs-comment">//   {</span>\n    <span class="hljs-comment">//     \'name\': \'Default name\',</span>\n    <span class="hljs-comment">//   },</span>\n    <span class="hljs-comment">//   {</span>\n    <span class="hljs-comment">//     \'name\': \'Default name\',</span>\n    <span class="hljs-comment">//   },</span>\n    <span class="hljs-comment">// ],</span>\n    <span class="hljs-comment">// \'defaultsAndMinItems\': [</span>\n    <span class="hljs-comment">//   \'carp\',</span>\n    <span class="hljs-comment">//   \'trout\',</span>\n    <span class="hljs-comment">//   \'bream\',</span>\n    <span class="hljs-comment">//   \'unidentified\',</span>\n    <span class="hljs-comment">//   \'unidentified\',</span>\n    <span class="hljs-comment">// ],</span>\n    <span class="hljs-comment">// \'nestedList\': [</span>\n    <span class="hljs-comment">//   [</span>\n    <span class="hljs-comment">//     \'lorem\',</span>\n    <span class="hljs-comment">//     \'ipsum\',</span>\n    <span class="hljs-comment">//   ],</span>\n    <span class="hljs-comment">//   [</span>\n    <span class="hljs-comment">//     \'dolor\',</span>\n    <span class="hljs-comment">//   ],</span>\n    <span class="hljs-comment">// ],</span>\n    <span class="hljs-comment">// \'unorderable\': [</span>\n    <span class="hljs-comment">//   \'one\',</span>\n    <span class="hljs-comment">//   \'two\',</span>\n    <span class="hljs-comment">// ],</span>\n    <span class="hljs-comment">// \'unremovable\': [</span>\n    <span class="hljs-comment">//   \'one\',</span>\n    <span class="hljs-comment">//   \'two\',</span>\n    <span class="hljs-comment">// ],</span>\n    <span class="hljs-comment">// \'noToolbar\': [</span>\n    <span class="hljs-comment">//   \'one\',</span>\n    <span class="hljs-comment">//   \'two\',</span>\n    <span class="hljs-comment">// ],</span>\n    <span class="hljs-comment">// \'fixedNoToolbar\': [</span>\n    <span class="hljs-comment">//   42,</span>\n    <span class="hljs-comment">//   true,</span>\n    <span class="hljs-comment">//   \'additional item one\',</span>\n    <span class="hljs-comment">//   \'additional item two\',</span>\n    <span class="hljs-comment">// ],</span>\n  };\n  options: FormlyFormOptions = {};\n\n  fields: FormlyFieldConfig[] = [<span class="hljs-keyword">this</span>.formlyJsonschema.toFieldConfig({\n    <span class="hljs-string">\'definitions\'</span>: {\n      <span class="hljs-string">\'Thing\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'object\'</span>,\n        <span class="hljs-string">\'properties\'</span>: {\n          <span class="hljs-string">\'name\'</span>: {\n            <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'string\'</span>,\n            <span class="hljs-string">\'default\'</span>: <span class="hljs-string">\'Default name\'</span>,\n          },\n        },\n      },\n    },\n    <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'object\'</span>,\n    <span class="hljs-string">\'properties\'</span>: {\n      <span class="hljs-string">\'listOfStrings\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'array\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'A list of strings\'</span>,\n        <span class="hljs-string">\'items\'</span>: {\n          <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'string\'</span>,\n          <span class="hljs-string">\'default\'</span>: <span class="hljs-string">\'bazinga\'</span>,\n        },\n      },\n      <span class="hljs-string">\'multipleChoicesList\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'array\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'A multiple choices list\'</span>,\n        <span class="hljs-string">\'items\'</span>: {\n          <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'string\'</span>,\n          <span class="hljs-string">\'enum\'</span>: [\n            <span class="hljs-string">\'foo\'</span>,\n            <span class="hljs-string">\'bar\'</span>,\n            <span class="hljs-string">\'fuzz\'</span>,\n            <span class="hljs-string">\'qux\'</span>,\n          ],\n        },\n        <span class="hljs-string">\'uniqueItems\'</span>: <span class="hljs-literal">true</span>,\n      },\n      <span class="hljs-string">\'fixedItemsList\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'array\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'A list of fixed items\'</span>,\n        <span class="hljs-string">\'items\'</span>: [\n          {\n            <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'A string value\'</span>,\n            <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'string\'</span>,\n            <span class="hljs-string">\'default\'</span>: <span class="hljs-string">\'lorem ipsum\'</span>,\n          },\n          {\n            <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'a boolean value\'</span>,\n            <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'boolean\'</span>,\n          },\n        ],\n        <span class="hljs-string">\'additionalItems\'</span>: {\n          <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Additional item\'</span>,\n          <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'number\'</span>,\n        },\n      },\n      <span class="hljs-comment">// \'minItemsList\': {</span>\n      <span class="hljs-comment">//   \'type\': \'array\',</span>\n      <span class="hljs-comment">//   \'title\': \'A list with a minimal number of items\',</span>\n      <span class="hljs-comment">//   \'minItems\': 3,</span>\n      <span class="hljs-comment">//   \'items\': {</span>\n      <span class="hljs-comment">//     \'$ref\': \'#/definitions/Thing\',</span>\n      <span class="hljs-comment">//   },</span>\n      <span class="hljs-comment">// },</span>\n      <span class="hljs-comment">// \'defaultsAndMinItems\': {</span>\n      <span class="hljs-comment">//   \'type\': \'array\',</span>\n      <span class="hljs-comment">//   \'title\': \'List and item level defaults\',</span>\n      <span class="hljs-comment">//   \'minItems\': 5,</span>\n      <span class="hljs-comment">//   \'default\': [</span>\n      <span class="hljs-comment">//     \'carp\',</span>\n      <span class="hljs-comment">//     \'trout\',</span>\n      <span class="hljs-comment">//     \'bream\',</span>\n      <span class="hljs-comment">//   ],</span>\n      <span class="hljs-comment">//   \'items\': {</span>\n      <span class="hljs-comment">//     \'type\': \'string\',</span>\n      <span class="hljs-comment">//     \'default\': \'unidentified\',</span>\n      <span class="hljs-comment">//   },</span>\n      <span class="hljs-comment">// },</span>\n      <span class="hljs-comment">// \'nestedList\': {</span>\n      <span class="hljs-comment">//   \'type\': \'array\',</span>\n      <span class="hljs-comment">//   \'title\': \'Nested list\',</span>\n      <span class="hljs-comment">//   \'items\': {</span>\n      <span class="hljs-comment">//     \'type\': \'array\',</span>\n      <span class="hljs-comment">//     \'title\': \'Inner list\',</span>\n      <span class="hljs-comment">//     \'items\': {</span>\n      <span class="hljs-comment">//       \'type\': \'string\',</span>\n      <span class="hljs-comment">//       \'default\': \'lorem ipsum\',</span>\n      <span class="hljs-comment">//     },</span>\n      <span class="hljs-comment">//   },</span>\n      <span class="hljs-comment">// },</span>\n      <span class="hljs-comment">// \'unorderable\': {</span>\n      <span class="hljs-comment">//   \'title\': \'Unorderable items\',</span>\n      <span class="hljs-comment">//   \'type\': \'array\',</span>\n      <span class="hljs-comment">//   \'items\': {</span>\n      <span class="hljs-comment">//     \'type\': \'string\',</span>\n      <span class="hljs-comment">//     \'default\': \'lorem ipsum\',</span>\n      <span class="hljs-comment">//   },</span>\n      <span class="hljs-comment">// },</span>\n      <span class="hljs-comment">// \'unremovable\': {</span>\n      <span class="hljs-comment">//   \'title\': \'Unremovable items\',</span>\n      <span class="hljs-comment">//   \'type\': \'array\',</span>\n      <span class="hljs-comment">//   \'items\': {</span>\n      <span class="hljs-comment">//     \'type\': \'string\',</span>\n      <span class="hljs-comment">//     \'default\': \'lorem ipsum\',</span>\n      <span class="hljs-comment">//   },</span>\n      <span class="hljs-comment">// },</span>\n      <span class="hljs-comment">// \'noToolbar\': {</span>\n      <span class="hljs-comment">//   \'title\': \'No add, remove and order buttons\',</span>\n      <span class="hljs-comment">//   \'type\': \'array\',</span>\n      <span class="hljs-comment">//   \'items\': {</span>\n      <span class="hljs-comment">//     \'type\': \'string\',</span>\n      <span class="hljs-comment">//     \'default\': \'lorem ipsum\',</span>\n      <span class="hljs-comment">//   },</span>\n      <span class="hljs-comment">// },</span>\n      <span class="hljs-comment">// \'fixedNoToolbar\': {</span>\n      <span class="hljs-comment">//   \'title\': \'Fixed array without buttons\',</span>\n      <span class="hljs-comment">//   \'type\': \'array\',</span>\n      <span class="hljs-comment">//   \'items\': [</span>\n      <span class="hljs-comment">//     {</span>\n      <span class="hljs-comment">//       \'title\': \'A number\',</span>\n      <span class="hljs-comment">//       \'type\': \'number\',</span>\n      <span class="hljs-comment">//       \'default\': 42,</span>\n      <span class="hljs-comment">//     },</span>\n      <span class="hljs-comment">//     {</span>\n      <span class="hljs-comment">//       \'title\': \'A boolean\',</span>\n      <span class="hljs-comment">//       \'type\': \'boolean\',</span>\n      <span class="hljs-comment">//       \'default\': false,</span>\n      <span class="hljs-comment">//     },</span>\n      <span class="hljs-comment">//   ],</span>\n      <span class="hljs-comment">//   \'additionalItems\': {</span>\n      <span class="hljs-comment">//     \'title\': \'A string\',</span>\n      <span class="hljs-comment">//     \'type\': \'string\',</span>\n      <span class="hljs-comment">//     \'default\': \'lorem ipsum\',</span>\n      <span class="hljs-comment">//   },</span>\n      <span class="hljs-comment">// },</span>\n    },\n  })];\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> formlyJsonschema: FormlyJsonschema</span>) {}\n\n  submit() {\n    alert(<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-keyword">this</span>.model));\n  }\n}\n'},MTBG:function(n,s){n.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FieldArrayType } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'formly-array-type\'</span>,\n  template: <span class="hljs-string">`\n    &lt;legend *ngIf="to.label"&gt;{{ to.label }}&lt;/legend&gt;\n    &lt;div *ngFor="let field of field.fieldGroup;let i = index;" class="row"&gt;\n      &lt;formly-field class="col-sm-10" [field]="field"&gt;&lt;/formly-field&gt;\n      &lt;div class="col-sm-2"&gt;\n        &lt;button class="btn btn-danger" type="button" (click)="remove(i)"&gt;Remove&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class="text-right"&gt;\n      &lt;button class="btn btn-primary" type="button" (click)="add()"&gt;Add&lt;/button&gt;\n    &lt;/div&gt;\n  `</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> ArrayTypeComponent <span class="hljs-keyword">extends</span> FieldArrayType {}\n'},MeFt:function(n,s){n.exports='<span class="hljs-keyword">import</span> { NgModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { CommonModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/common\'</span>;\n<span class="hljs-keyword">import</span> { ReactiveFormsModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { FormlyModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n<span class="hljs-keyword">import</span> { FormlyBootstrapModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/bootstrap\'</span>;\n<span class="hljs-keyword">import</span> { AppComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./app.component\'</span>;\n<span class="hljs-keyword">import</span> { ArrayTypeComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./array.type\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minlengthValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`Should have atleast <span class="hljs-subst">${field.templateOptions.minLength}</span> characters`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxlengthValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be less than <span class="hljs-subst">${field.templateOptions.maxLength}</span> characters`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be more than <span class="hljs-subst">${field.templateOptions.min}</span>`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxValidationMessage</span>(<span class="hljs-params">err, field</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be less than <span class="hljs-subst">${field.templateOptions.max}</span>`</span>;\n}\n\n<span class="hljs-meta">@NgModule</span>({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: <span class="hljs-string">\'required\'</span>, message: <span class="hljs-string">\'This field is required\'</span> },\n        { name: <span class="hljs-string">\'minlength\'</span>, message: minlengthValidationMessage },\n        { name: <span class="hljs-string">\'maxlength\'</span>, message: maxlengthValidationMessage },\n        { name: <span class="hljs-string">\'min\'</span>, message: minValidationMessage },\n        { name: <span class="hljs-string">\'max\'</span>, message: maxValidationMessage },\n      ],\n      types: [\n        { name: <span class="hljs-string">\'string\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span> },\n        {\n          name: <span class="hljs-string">\'number\'</span>,\n          <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span>,\n          defaultOptions: {\n            templateOptions: {\n              <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n            },\n          },\n        },\n        {\n          name: <span class="hljs-string">\'integer\'</span>,\n          <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span>,\n          defaultOptions: {\n            templateOptions: {\n              <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n            },\n          },\n        },\n        { name: <span class="hljs-string">\'object\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'formly-group\'</span> },\n        { name: <span class="hljs-string">\'boolean\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'checkbox\'</span> },\n        { name: <span class="hljs-string">\'array\'</span>, component: ArrayTypeComponent },\n        { name: <span class="hljs-string">\'enum\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'select\'</span> },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppModule { }\n'},Q76X:function(n,s){n.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FieldArrayType } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'formly-array-type\'</span>,\n  template: <span class="hljs-string">`\n    &lt;legend *ngIf="to.label"&gt;{{ to.label }}&lt;/legend&gt;\n    &lt;div *ngFor="let field of field.fieldGroup;let i = index;" class="row"&gt;\n      &lt;formly-field class="col-sm-10" [field]="field"&gt;&lt;/formly-field&gt;\n      &lt;div class="col-sm-2"&gt;\n        &lt;button class="btn btn-danger" type="button" (click)="remove(i)"&gt;Remove&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class="text-right"&gt;\n      &lt;button class="btn btn-primary" type="button" (click)="add()"&gt;Add&lt;/button&gt;\n    &lt;/div&gt;\n  `</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> ArrayTypeComponent <span class="hljs-keyword">extends</span> FieldArrayType {}\n'},SLQ9:function(n,s){n.exports="import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\nimport { AppComponent } from './app.component';\nimport { ArrayTypeComponent } from './array.type';\n\nexport function minlengthValidationMessage(err, field) {\n  return `Should have atleast ${field.templateOptions.minLength} characters`;\n}\n\nexport function maxlengthValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.maxLength} characters`;\n}\n\nexport function minValidationMessage(err, field) {\n  return `This value should be more than ${field.templateOptions.min}`;\n}\n\nexport function maxValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.max}`;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: 'required', message: 'This field is required' },\n        { name: 'minlength', message: minlengthValidationMessage },\n        { name: 'maxlength', message: maxlengthValidationMessage },\n        { name: 'min', message: minValidationMessage },\n        { name: 'max', message: maxValidationMessage },\n      ],\n      types: [\n        { name: 'string', extends: 'input' },\n        {\n          name: 'number',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        {\n          name: 'integer',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        { name: 'object', extends: 'formly-group' },\n        { name: 'boolean', extends: 'checkbox' },\n        { name: 'array', component: ArrayTypeComponent },\n        { name: 'enum', extends: 'select' },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n  ],\n})\nexport class AppModule { }\n"},Uc86:function(n,s){n.exports='import { Component } from \'@angular/core\';\nimport { FieldArrayType } from \'@ngx-formly/core\';\n\n@Component({\n  selector: \'formly-array-type\',\n  template: `\n    <legend *ngIf="to.label">{{ to.label }}</legend>\n    <div *ngFor="let field of field.fieldGroup;let i = index;" class="row">\n      <formly-field class="col-sm-10" [field]="field"></formly-field>\n      <div class="col-sm-2">\n        <button class="btn btn-danger" type="button" (click)="remove(i)">Remove</button>\n      </div>\n    </div>\n    <div class="text-right">\n      <button class="btn btn-primary" type="button" (click)="add()">Add</button>\n    </div>\n  `,\n})\nexport class ArrayTypeComponent extends FieldArrayType {}\n'},VzbS:function(n,s){n.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FormGroup } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { FormlyFormOptions, FormlyFieldConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n<span class="hljs-keyword">import</span> { FormlyJsonschema } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core/json-schema\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'formly-app-example\'</span>,\n  templateUrl: <span class="hljs-string">\'./app.component.html\'</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent {\n  form = <span class="hljs-keyword">new</span> FormGroup({});\n  model: <span class="hljs-built_in">any</span> = {\n    <span class="hljs-string">\'number\'</span>: <span class="hljs-number">3.14</span>,\n    <span class="hljs-string">\'integer\'</span>: <span class="hljs-number">42</span>,\n    <span class="hljs-string">\'numberEnum\'</span>: <span class="hljs-number">2</span>,\n    <span class="hljs-string">\'integerRange\'</span>: <span class="hljs-number">42</span>,\n    <span class="hljs-string">\'integerRangeSteps\'</span>: <span class="hljs-number">80</span>,\n  };\n  options: FormlyFormOptions = {};\n\n  fields: FormlyFieldConfig[] = [<span class="hljs-keyword">this</span>.formlyJsonschema.toFieldConfig({\n    <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'object\'</span>,\n    <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Number fields &amp; widgets\'</span>,\n    <span class="hljs-string">\'properties\'</span>: {\n      <span class="hljs-string">\'number\'</span>: {\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Number\'</span>,\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'number\'</span>,\n      },\n      <span class="hljs-string">\'integer\'</span>: {\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Integer\'</span>,\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'integer\'</span>,\n      },\n      <span class="hljs-string">\'numberEnum\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'number\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Number enum\'</span>,\n        <span class="hljs-string">\'enum\'</span>: [\n          <span class="hljs-number">1</span>,\n          <span class="hljs-number">2</span>,\n          <span class="hljs-number">3</span>,\n        ],\n      },\n      <span class="hljs-string">\'numberEnumRadio\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'number\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Number enum\'</span>,\n        <span class="hljs-string">\'enum\'</span>: [\n          <span class="hljs-number">1</span>,\n          <span class="hljs-number">2</span>,\n          <span class="hljs-number">3</span>,\n        ],\n      },\n      <span class="hljs-string">\'integerRange\'</span>: {\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Integer range\'</span>,\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'integer\'</span>,\n        <span class="hljs-string">\'minimum\'</span>: <span class="hljs-number">42</span>,\n        <span class="hljs-string">\'maximum\'</span>: <span class="hljs-number">100</span>,\n      },\n      <span class="hljs-string">\'integerRangeSteps\'</span>: {\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Integer range (by 10)\'</span>,\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'integer\'</span>,\n        <span class="hljs-string">\'minimum\'</span>: <span class="hljs-number">50</span>,\n        <span class="hljs-string">\'maximum\'</span>: <span class="hljs-number">100</span>,\n        <span class="hljs-string">\'multipleOf\'</span>: <span class="hljs-number">10</span>,\n      },\n    },\n  })];\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> formlyJsonschema: FormlyJsonschema</span>) {}\n\n  submit() {\n    alert(<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-keyword">this</span>.model));\n  }\n}\n'},WqFU:function(n,s){n.exports="import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\nimport { AppComponent } from './app.component';\nimport { ArrayTypeComponent } from './array.type';\n\nexport function minlengthValidationMessage(err, field) {\n  return `Should have atleast ${field.templateOptions.minLength} characters`;\n}\n\nexport function maxlengthValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.maxLength} characters`;\n}\n\nexport function minValidationMessage(err, field) {\n  return `This value should be more than ${field.templateOptions.min}`;\n}\n\nexport function maxValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.max}`;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: 'required', message: 'This field is required' },\n        { name: 'minlength', message: minlengthValidationMessage },\n        { name: 'maxlength', message: maxlengthValidationMessage },\n        { name: 'min', message: minValidationMessage },\n        { name: 'max', message: maxValidationMessage },\n      ],\n      types: [\n        { name: 'string', extends: 'input' },\n        {\n          name: 'number',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        {\n          name: 'integer',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        { name: 'object', extends: 'formly-group' },\n        { name: 'boolean', extends: 'checkbox' },\n        { name: 'array', component: ArrayTypeComponent },\n        { name: 'enum', extends: 'select' },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n  ],\n})\nexport class AppModule { }\n"},YSPx:function(n,s){n.exports='import { Component } from \'@angular/core\';\nimport { FieldArrayType } from \'@ngx-formly/core\';\n\n@Component({\n  selector: \'formly-array-type\',\n  template: `\n    <legend *ngIf="to.label">{{ to.label }}</legend>\n    <div *ngFor="let field of field.fieldGroup;let i = index;" class="row">\n      <formly-field class="col-sm-10" [field]="field"></formly-field>\n      <div class="col-sm-2">\n        <button class="btn btn-danger" type="button" (click)="remove(i)">Remove</button>\n      </div>\n    </div>\n    <div class="text-right">\n      <button class="btn btn-primary" type="button" (click)="add()">Add</button>\n    </div>\n  `,\n})\nexport class ArrayTypeComponent extends FieldArrayType {}\n'},"gh/q":function(n,s,a){"use strict";a.r(s);var l=a("CcnG");function e(n,s){return"Should have atleast "+s.templateOptions.minLength+" characters"}function t(n,s){return"This value should be less than "+s.templateOptions.maxLength+" characters"}function p(n,s){return"This value should be more than "+s.templateOptions.min}function o(n,s){return"This value should be less than "+s.templateOptions.max}var r=function(){return function(){}}(),i=a("gIcY"),m=a("HkYz"),c=function(){return(c=Object.assign||function(n){for(var s,a=1,l=arguments.length;a<l;a++)for(var e in s=arguments[a])Object.prototype.hasOwnProperty.call(s,e)&&(n[e]=s[e]);return n}).apply(this,arguments)},u=function(){function n(){}return n.prototype.toFieldConfig=function(n,s){return this._toFieldConfig(n,null,s)},n.prototype._toFieldConfig=function(n,s,a){var l=this,e=c({},s?{key:s}:{},{type:n.type,defaultValue:n.default,templateOptions:{min:n.minimum,max:n.maximum,minLength:n.minLength,maxLength:n.maxLength,label:n.title,readonly:n.readOnly,pattern:n.pattern,description:n.description}});switch(n.enum&&("integer"!==e.type&&"number"!==e.type||(e.parsers=[Number]),e.type="enum",e.templateOptions.options=n.enum,e.templateOptions.labelProp=function(n){return n},e.templateOptions.valueProp=function(n){return n}),n.type){case"object":e.fieldGroup=[],Object.keys(n.properties).forEach(function(s){var t=l._toFieldConfig(n.properties[s],s,a);Array.isArray(n.required)&&-1!==n.required.indexOf(s)&&(t.templateOptions.required=!0),e.fieldGroup.push(t)});break;case"array":Array.isArray(n.items)?(e._fieldArray=[],e.fieldGroup=[],n.items.forEach(function(n){return e._fieldArray.push(l._toFieldConfig(n,s,a))}),n.additionalItems&&(e._additionalFieldArray=this._toFieldConfig(n.additionalItems,s,a)),Object.defineProperty(e,"fieldArray",{get:function(){return e._fieldArray[e.fieldGroup.length]||e._additionalFieldArray},enumerable:!0,configurable:!0})):e.fieldArray=this._toFieldConfig(n.items,s,a)}if(n.widget&&n.widget.formlyConfig){var t=n.widget.formlyConfig;e=Object(m.f)(t,e)}return a&&a.map&&(e=a.map(e,n)),e},n.ngInjectableDef=l.defineInjectable({factory:function(){return new n},token:n,providedIn:"root"}),n}(),d=function(){function n(n){this.formlyJsonschema=n,this.form=new i.FormGroup({}),this.model={firstName:"Chuck",lastName:"Norris",age:75,bio:"Roundhouse kicking asses since 1940",password:"noneed"},this.options={},this.fields=[this.formlyJsonschema.toFieldConfig({title:"A registration form",description:"A simple form example.",type:"object",required:["firstName","lastName"],properties:{firstName:{type:"string",title:"First name"},lastName:{type:"string",title:"Last name"},age:{type:"integer",title:"Age"},bio:{type:"string",title:"Bio"},password:{type:"string",title:"Password",minLength:3},telephone:{type:"string",title:"Telephone",minLength:10}}})]}return n.prototype.submit=function(){alert(JSON.stringify(this.model))},n}(),h={title:"Simple",component:d,debug:!1,files:[{file:"app.component.html",content:a("Bzvg"),filecontent:a("+ZQX")},{file:"app.component.ts",content:a("CVVk"),filecontent:a("/GUq")},{file:"app.module.ts",content:a("MeFt"),filecontent:a("mkUL")},{file:"array.type.ts",content:a("MTBG"),filecontent:a("YSPx")}]};function g(n,s){return"Should have atleast "+s.templateOptions.minLength+" characters"}function f(n,s){return"This value should be less than "+s.templateOptions.maxLength+" characters"}function j(n,s){return"This value should be more than "+s.templateOptions.min}function y(n,s){return"This value should be less than "+s.templateOptions.max}var b=function(){return function(){}}(),x=function(){function n(n){this.formlyJsonschema=n,this.form=new i.FormGroup({}),this.model={number:3.14,integer:42,numberEnum:2,integerRange:42,integerRangeSteps:80},this.options={},this.fields=[this.formlyJsonschema.toFieldConfig({type:"object",title:"Number fields & widgets",properties:{number:{title:"Number",type:"number"},integer:{title:"Integer",type:"integer"},numberEnum:{type:"number",title:"Number enum",enum:[1,2,3]},numberEnumRadio:{type:"number",title:"Number enum",enum:[1,2,3]},integerRange:{title:"Integer range",type:"integer",minimum:42,maximum:100},integerRangeSteps:{title:"Integer range (by 10)",type:"integer",minimum:50,maximum:100,multipleOf:10}}})]}return n.prototype.submit=function(){alert(JSON.stringify(this.model))},n}(),v={title:"Numbers",component:x,debug:!1,files:[{file:"app.component.html",content:a("AqAy"),filecontent:a("EUjJ")},{file:"app.component.ts",content:a("VzbS"),filecontent:a("rEfR")},{file:"app.module.ts",content:a("6Uo4"),filecontent:a("uYKB")},{file:"array.type.ts",content:a("vrIJ"),filecontent:a("yZfe")}]};function k(n,s){return"Should have atleast "+s.templateOptions.minLength+" characters"}function w(n,s){return"This value should be less than "+s.templateOptions.maxLength+" characters"}function F(n,s){return"This value should be more than "+s.templateOptions.min}function C(n,s){return"This value should be less than "+s.templateOptions.max}var M=function(){return function(){}}(),O=function(){function n(n){this.formlyJsonschema=n,this.form=new i.FormGroup({}),this.model={title:"My current tasks",tasks:[{title:"My first task",details:"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",done:!0},{title:"My second task",details:"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur",done:!1}]},this.options={},this.fields=[this.formlyJsonschema.toFieldConfig({title:"A list of tasks",type:"object",required:["title"],properties:{title:{type:"string",title:"Task list title"},tasks:{type:"array",title:"Tasks",items:{type:"object",required:["title"],properties:{title:{type:"string",title:"Title",description:"A sample title"},details:{type:"string",title:"Task details",description:"Enter the task details"},done:{type:"boolean",title:"Done?",default:!1}}}}}})]}return n.prototype.submit=function(){alert(JSON.stringify(this.model))},n}(),A={title:"Nested",component:O,debug:!1,files:[{file:"app.component.html",content:a("w5YM"),filecontent:a("APLF")},{file:"app.component.ts",content:a("yUU/"),filecontent:a("pZPy")},{file:"app.module.ts",content:a("CT9U"),filecontent:a("WqFU")},{file:"array.type.ts",content:a("IUSh"),filecontent:a("Uc86")}]};function T(n,s){return"Should have atleast "+s.templateOptions.minLength+" characters"}function N(n,s){return"This value should be less than "+s.templateOptions.maxLength+" characters"}function R(n,s){return"This value should be more than "+s.templateOptions.min}function S(n,s){return"This value should be less than "+s.templateOptions.max}var I=function(){return function(){}}(),V=function(){function n(n){this.formlyJsonschema=n,this.form=new i.FormGroup({}),this.model={listOfStrings:["foo","bar","bazinga"],multipleChoicesList:["foo","bar"],fixedItemsList:["Some text",!0,123]},this.options={},this.fields=[this.formlyJsonschema.toFieldConfig({definitions:{Thing:{type:"object",properties:{name:{type:"string",default:"Default name"}}}},type:"object",properties:{listOfStrings:{type:"array",title:"A list of strings",items:{type:"string",default:"bazinga"}},multipleChoicesList:{type:"array",title:"A multiple choices list",items:{type:"string",enum:["foo","bar","fuzz","qux"]},uniqueItems:!0},fixedItemsList:{type:"array",title:"A list of fixed items",items:[{title:"A string value",type:"string",default:"lorem ipsum"},{title:"a boolean value",type:"boolean"}],additionalItems:{title:"Additional item",type:"number"}}}})]}return n.prototype.submit=function(){alert(JSON.stringify(this.model))},n}(),L={examples:[h,v,A,{title:"Arrays",component:V,debug:!1,files:[{file:"app.component.html",content:a("3Tvo"),filecontent:a("31Ni")},{file:"app.component.ts",content:a("KOT/"),filecontent:a("mfii")},{file:"app.module.ts",content:a("IIV6"),filecontent:a("SLQ9")},{file:"array.type.ts",content:a("Q76X"),filecontent:a("3i2D")}]}]},G=function(){return function(){}}(),_=a("NcP4"),J=a("AcC/"),q=a("htty"),D=a("LgGJ"),U=a("MT1c"),$=a("1Q/V"),B=a("9+aI"),P=a("haId"),E=a("LJsP"),z=a("yR2A"),Y=a("UFMs"),Z=a("cI/F"),Q=a("fVcV"),W=a("DAbo"),X=a("Ip0R"),H=a("mrSG"),K=function(n){function s(){return null!==n&&n.apply(this,arguments)||this}return Object(H.__extends)(s,n),s}(m.a),nn=l["\u0275crt"]({encapsulation:2,styles:[],data:{}});function sn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,1,"legend",[],null,null,null,null,null)),(n()(),l["\u0275ted"](1,null,["",""]))],null,function(n,s){n(s,1,0,s.component.to.label)})}function an(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,5,"div",[["class","row"]],null,null,null,null,null)),(n()(),l["\u0275eld"](1,0,null,null,1,"formly-field",[["class","col-sm-10"]],[[4,"display",null],[8,"className",0]],null,null,Z.b,Z.a)),l["\u0275did"](2,16760832,null,0,Q.a,[W.b,l.ComponentFactoryResolver,l.Injector,[8,null]],{field:[0,"field"],className:[1,"className"]},null),(n()(),l["\u0275eld"](3,0,null,null,2,"div",[["class","col-sm-2"]],null,null,null,null,null)),(n()(),l["\u0275eld"](4,0,null,null,1,"button",[["class","btn btn-danger"],["type","button"]],null,[[null,"click"]],function(n,s,a){var l=!0;return"click"===s&&(l=!1!==n.component.remove(n.context.index)&&l),l},null,null)),(n()(),l["\u0275ted"](-1,null,["Remove"]))],function(n,s){n(s,2,0,s.context.$implicit,"col-sm-10")},function(n,s){n(s,1,0,l["\u0275nov"](s,2).field.hide?"none":"",l["\u0275nov"](s,2).field.className?l["\u0275nov"](s,2).field.className:l["\u0275nov"](s,2).className)})}function ln(n){return l["\u0275vid"](0,[(n()(),l["\u0275and"](16777216,null,null,1,null,sn)),l["\u0275did"](1,16384,null,0,X.NgIf,[l.ViewContainerRef,l.TemplateRef],{ngIf:[0,"ngIf"]},null),(n()(),l["\u0275and"](16777216,null,null,1,null,an)),l["\u0275did"](3,278528,null,0,X.NgForOf,[l.ViewContainerRef,l.TemplateRef,l.IterableDiffers],{ngForOf:[0,"ngForOf"]},null),(n()(),l["\u0275eld"](4,0,null,null,2,"div",[["class","text-right"]],null,null,null,null,null)),(n()(),l["\u0275eld"](5,0,null,null,1,"button",[["class","btn btn-primary"],["type","button"]],null,[[null,"click"]],function(n,s,a){var l=!0;return"click"===s&&(l=!1!==n.component.add()&&l),l},null,null)),(n()(),l["\u0275ted"](-1,null,["Add"]))],function(n,s){var a=s.component;n(s,1,0,a.to.label),n(s,3,0,a.field.fieldGroup)},null)}function en(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,1,"formly-array-type",[],null,null,null,ln,nn)),l["\u0275did"](1,49152,null,0,K,[[2,W.a]],null,null)],null,null)}var tn=l["\u0275ccf"]("formly-array-type",K,en,{field:"field",model:"model",form:"form",options:"options"},{},[]),pn=function(n){function s(){return null!==n&&n.apply(this,arguments)||this}return Object(H.__extends)(s,n),s}(m.a),on=l["\u0275crt"]({encapsulation:2,styles:[],data:{}});function rn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,1,"legend",[],null,null,null,null,null)),(n()(),l["\u0275ted"](1,null,["",""]))],null,function(n,s){n(s,1,0,s.component.to.label)})}function mn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,5,"div",[["class","row"]],null,null,null,null,null)),(n()(),l["\u0275eld"](1,0,null,null,1,"formly-field",[["class","col-sm-10"]],[[4,"display",null],[8,"className",0]],null,null,Z.b,Z.a)),l["\u0275did"](2,16760832,null,0,Q.a,[W.b,l.ComponentFactoryResolver,l.Injector,[8,null]],{field:[0,"field"],className:[1,"className"]},null),(n()(),l["\u0275eld"](3,0,null,null,2,"div",[["class","col-sm-2"]],null,null,null,null,null)),(n()(),l["\u0275eld"](4,0,null,null,1,"button",[["class","btn btn-danger"],["type","button"]],null,[[null,"click"]],function(n,s,a){var l=!0;return"click"===s&&(l=!1!==n.component.remove(n.context.index)&&l),l},null,null)),(n()(),l["\u0275ted"](-1,null,["Remove"]))],function(n,s){n(s,2,0,s.context.$implicit,"col-sm-10")},function(n,s){n(s,1,0,l["\u0275nov"](s,2).field.hide?"none":"",l["\u0275nov"](s,2).field.className?l["\u0275nov"](s,2).field.className:l["\u0275nov"](s,2).className)})}function cn(n){return l["\u0275vid"](0,[(n()(),l["\u0275and"](16777216,null,null,1,null,rn)),l["\u0275did"](1,16384,null,0,X.NgIf,[l.ViewContainerRef,l.TemplateRef],{ngIf:[0,"ngIf"]},null),(n()(),l["\u0275and"](16777216,null,null,1,null,mn)),l["\u0275did"](3,278528,null,0,X.NgForOf,[l.ViewContainerRef,l.TemplateRef,l.IterableDiffers],{ngForOf:[0,"ngForOf"]},null),(n()(),l["\u0275eld"](4,0,null,null,2,"div",[["class","text-right"]],null,null,null,null,null)),(n()(),l["\u0275eld"](5,0,null,null,1,"button",[["class","btn btn-primary"],["type","button"]],null,[[null,"click"]],function(n,s,a){var l=!0;return"click"===s&&(l=!1!==n.component.add()&&l),l},null,null)),(n()(),l["\u0275ted"](-1,null,["Add"]))],function(n,s){var a=s.component;n(s,1,0,a.to.label),n(s,3,0,a.field.fieldGroup)},null)}function un(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,1,"formly-array-type",[],null,null,null,cn,on)),l["\u0275did"](1,49152,null,0,pn,[[2,W.a]],null,null)],null,null)}var dn=l["\u0275ccf"]("formly-array-type",pn,un,{field:"field",model:"model",form:"form",options:"options"},{},[]),hn=function(n){function s(){return null!==n&&n.apply(this,arguments)||this}return Object(H.__extends)(s,n),s}(m.a),gn=l["\u0275crt"]({encapsulation:2,styles:[],data:{}});function fn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,1,"legend",[],null,null,null,null,null)),(n()(),l["\u0275ted"](1,null,["",""]))],null,function(n,s){n(s,1,0,s.component.to.label)})}function jn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,5,"div",[["class","row"]],null,null,null,null,null)),(n()(),l["\u0275eld"](1,0,null,null,1,"formly-field",[["class","col-sm-10"]],[[4,"display",null],[8,"className",0]],null,null,Z.b,Z.a)),l["\u0275did"](2,16760832,null,0,Q.a,[W.b,l.ComponentFactoryResolver,l.Injector,[8,null]],{field:[0,"field"],className:[1,"className"]},null),(n()(),l["\u0275eld"](3,0,null,null,2,"div",[["class","col-sm-2"]],null,null,null,null,null)),(n()(),l["\u0275eld"](4,0,null,null,1,"button",[["class","btn btn-danger"],["type","button"]],null,[[null,"click"]],function(n,s,a){var l=!0;return"click"===s&&(l=!1!==n.component.remove(n.context.index)&&l),l},null,null)),(n()(),l["\u0275ted"](-1,null,["Remove"]))],function(n,s){n(s,2,0,s.context.$implicit,"col-sm-10")},function(n,s){n(s,1,0,l["\u0275nov"](s,2).field.hide?"none":"",l["\u0275nov"](s,2).field.className?l["\u0275nov"](s,2).field.className:l["\u0275nov"](s,2).className)})}function yn(n){return l["\u0275vid"](0,[(n()(),l["\u0275and"](16777216,null,null,1,null,fn)),l["\u0275did"](1,16384,null,0,X.NgIf,[l.ViewContainerRef,l.TemplateRef],{ngIf:[0,"ngIf"]},null),(n()(),l["\u0275and"](16777216,null,null,1,null,jn)),l["\u0275did"](3,278528,null,0,X.NgForOf,[l.ViewContainerRef,l.TemplateRef,l.IterableDiffers],{ngForOf:[0,"ngForOf"]},null),(n()(),l["\u0275eld"](4,0,null,null,2,"div",[["class","text-right"]],null,null,null,null,null)),(n()(),l["\u0275eld"](5,0,null,null,1,"button",[["class","btn btn-primary"],["type","button"]],null,[[null,"click"]],function(n,s,a){var l=!0;return"click"===s&&(l=!1!==n.component.add()&&l),l},null,null)),(n()(),l["\u0275ted"](-1,null,["Add"]))],function(n,s){var a=s.component;n(s,1,0,a.to.label),n(s,3,0,a.field.fieldGroup)},null)}function bn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,1,"formly-array-type",[],null,null,null,yn,gn)),l["\u0275did"](1,49152,null,0,hn,[[2,W.a]],null,null)],null,null)}var xn=l["\u0275ccf"]("formly-array-type",hn,bn,{field:"field",model:"model",form:"form",options:"options"},{},[]),vn=function(n){function s(){return null!==n&&n.apply(this,arguments)||this}return Object(H.__extends)(s,n),s}(m.a),kn=l["\u0275crt"]({encapsulation:2,styles:[],data:{}});function wn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,1,"legend",[],null,null,null,null,null)),(n()(),l["\u0275ted"](1,null,["",""]))],null,function(n,s){n(s,1,0,s.component.to.label)})}function Fn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,5,"div",[["class","row"]],null,null,null,null,null)),(n()(),l["\u0275eld"](1,0,null,null,1,"formly-field",[["class","col-sm-10"]],[[4,"display",null],[8,"className",0]],null,null,Z.b,Z.a)),l["\u0275did"](2,16760832,null,0,Q.a,[W.b,l.ComponentFactoryResolver,l.Injector,[8,null]],{field:[0,"field"],className:[1,"className"]},null),(n()(),l["\u0275eld"](3,0,null,null,2,"div",[["class","col-sm-2"]],null,null,null,null,null)),(n()(),l["\u0275eld"](4,0,null,null,1,"button",[["class","btn btn-danger"],["type","button"]],null,[[null,"click"]],function(n,s,a){var l=!0;return"click"===s&&(l=!1!==n.component.remove(n.context.index)&&l),l},null,null)),(n()(),l["\u0275ted"](-1,null,["Remove"]))],function(n,s){n(s,2,0,s.context.$implicit,"col-sm-10")},function(n,s){n(s,1,0,l["\u0275nov"](s,2).field.hide?"none":"",l["\u0275nov"](s,2).field.className?l["\u0275nov"](s,2).field.className:l["\u0275nov"](s,2).className)})}function Cn(n){return l["\u0275vid"](0,[(n()(),l["\u0275and"](16777216,null,null,1,null,wn)),l["\u0275did"](1,16384,null,0,X.NgIf,[l.ViewContainerRef,l.TemplateRef],{ngIf:[0,"ngIf"]},null),(n()(),l["\u0275and"](16777216,null,null,1,null,Fn)),l["\u0275did"](3,278528,null,0,X.NgForOf,[l.ViewContainerRef,l.TemplateRef,l.IterableDiffers],{ngForOf:[0,"ngForOf"]},null),(n()(),l["\u0275eld"](4,0,null,null,2,"div",[["class","text-right"]],null,null,null,null,null)),(n()(),l["\u0275eld"](5,0,null,null,1,"button",[["class","btn btn-primary"],["type","button"]],null,[[null,"click"]],function(n,s,a){var l=!0;return"click"===s&&(l=!1!==n.component.add()&&l),l},null,null)),(n()(),l["\u0275ted"](-1,null,["Add"]))],function(n,s){var a=s.component;n(s,1,0,a.to.label),n(s,3,0,a.field.fieldGroup)},null)}function Mn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,1,"formly-array-type",[],null,null,null,Cn,kn)),l["\u0275did"](1,49152,null,0,vn,[[2,W.a]],null,null)],null,null)}var On=l["\u0275ccf"]("formly-array-type",vn,Mn,{field:"field",model:"model",form:"form",options:"options"},{},[]),An=a("pMnS"),Tn=a("4o01"),Nn=a("Dl9q"),Rn=a("UcnZ"),Sn=a("9Glx"),In=l["\u0275crt"]({encapsulation:2,styles:[],data:{}});function Vn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,9,"form",[["novalidate",""]],[[2,"ng-untouched",null],[2,"ng-touched",null],[2,"ng-pristine",null],[2,"ng-dirty",null],[2,"ng-valid",null],[2,"ng-invalid",null],[2,"ng-pending",null]],[[null,"ngSubmit"],[null,"submit"],[null,"reset"]],function(n,s,a){var e=!0,t=n.component;return"submit"===s&&(e=!1!==l["\u0275nov"](n,2).onSubmit(a)&&e),"reset"===s&&(e=!1!==l["\u0275nov"](n,2).onReset()&&e),"ngSubmit"===s&&(e=!1!==t.submit()&&e),e},null,null)),l["\u0275did"](1,16384,null,0,i["\u0275angular_packages_forms_forms_bh"],[],null,null),l["\u0275did"](2,540672,null,0,i.FormGroupDirective,[[8,null],[8,null]],{form:[0,"form"]},{ngSubmit:"ngSubmit"}),l["\u0275prd"](2048,null,i.ControlContainer,null,[i.FormGroupDirective]),l["\u0275did"](4,16384,null,0,i.NgControlStatusGroup,[[4,i.ControlContainer]],null,null),(n()(),l["\u0275eld"](5,0,null,null,2,"formly-form",[],null,null,null,Nn.b,Nn.a)),l["\u0275prd"](512,null,Rn.a,Rn.a,[W.b,l.ComponentFactoryResolver,l.Injector]),l["\u0275did"](7,966656,null,0,Sn.a,[Rn.a,W.b,[8,null],[2,i.FormGroupDirective]],{form:[0,"form"],model:[1,"model"],fields:[2,"fields"],options:[3,"options"]},null),(n()(),l["\u0275eld"](8,0,null,null,1,"button",[["class","btn btn-primary submit-button"],["type","submit"]],[[8,"disabled",0]],null,null,null,null)),(n()(),l["\u0275ted"](-1,null,["Submit"]))],function(n,s){var a=s.component;n(s,2,0,a.form),n(s,7,0,a.form,a.model,a.fields,a.options)},function(n,s){var a=s.component;n(s,0,0,l["\u0275nov"](s,4).ngClassUntouched,l["\u0275nov"](s,4).ngClassTouched,l["\u0275nov"](s,4).ngClassPristine,l["\u0275nov"](s,4).ngClassDirty,l["\u0275nov"](s,4).ngClassValid,l["\u0275nov"](s,4).ngClassInvalid,l["\u0275nov"](s,4).ngClassPending),n(s,8,0,!a.form.valid)})}function Ln(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,1,"formly-app-example",[],null,null,null,Vn,In)),l["\u0275did"](1,49152,null,0,d,[u],null,null)],null,null)}var Gn=l["\u0275ccf"]("formly-app-example",d,Ln,{},{},[]),_n=l["\u0275crt"]({encapsulation:2,styles:[],data:{}});function Jn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,9,"form",[["novalidate",""]],[[2,"ng-untouched",null],[2,"ng-touched",null],[2,"ng-pristine",null],[2,"ng-dirty",null],[2,"ng-valid",null],[2,"ng-invalid",null],[2,"ng-pending",null]],[[null,"ngSubmit"],[null,"submit"],[null,"reset"]],function(n,s,a){var e=!0,t=n.component;return"submit"===s&&(e=!1!==l["\u0275nov"](n,2).onSubmit(a)&&e),"reset"===s&&(e=!1!==l["\u0275nov"](n,2).onReset()&&e),"ngSubmit"===s&&(e=!1!==t.submit()&&e),e},null,null)),l["\u0275did"](1,16384,null,0,i["\u0275angular_packages_forms_forms_bh"],[],null,null),l["\u0275did"](2,540672,null,0,i.FormGroupDirective,[[8,null],[8,null]],{form:[0,"form"]},{ngSubmit:"ngSubmit"}),l["\u0275prd"](2048,null,i.ControlContainer,null,[i.FormGroupDirective]),l["\u0275did"](4,16384,null,0,i.NgControlStatusGroup,[[4,i.ControlContainer]],null,null),(n()(),l["\u0275eld"](5,0,null,null,2,"formly-form",[],null,null,null,Nn.b,Nn.a)),l["\u0275prd"](512,null,Rn.a,Rn.a,[W.b,l.ComponentFactoryResolver,l.Injector]),l["\u0275did"](7,966656,null,0,Sn.a,[Rn.a,W.b,[8,null],[2,i.FormGroupDirective]],{form:[0,"form"],model:[1,"model"],fields:[2,"fields"],options:[3,"options"]},null),(n()(),l["\u0275eld"](8,0,null,null,1,"button",[["class","btn btn-primary submit-button"],["type","submit"]],[[8,"disabled",0]],null,null,null,null)),(n()(),l["\u0275ted"](-1,null,["Submit"]))],function(n,s){var a=s.component;n(s,2,0,a.form),n(s,7,0,a.form,a.model,a.fields,a.options)},function(n,s){var a=s.component;n(s,0,0,l["\u0275nov"](s,4).ngClassUntouched,l["\u0275nov"](s,4).ngClassTouched,l["\u0275nov"](s,4).ngClassPristine,l["\u0275nov"](s,4).ngClassDirty,l["\u0275nov"](s,4).ngClassValid,l["\u0275nov"](s,4).ngClassInvalid,l["\u0275nov"](s,4).ngClassPending),n(s,8,0,!a.form.valid)})}function qn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,1,"formly-app-example",[],null,null,null,Jn,_n)),l["\u0275did"](1,49152,null,0,x,[u],null,null)],null,null)}var Dn=l["\u0275ccf"]("formly-app-example",x,qn,{},{},[]),Un=l["\u0275crt"]({encapsulation:2,styles:[],data:{}});function $n(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,9,"form",[["novalidate",""]],[[2,"ng-untouched",null],[2,"ng-touched",null],[2,"ng-pristine",null],[2,"ng-dirty",null],[2,"ng-valid",null],[2,"ng-invalid",null],[2,"ng-pending",null]],[[null,"ngSubmit"],[null,"submit"],[null,"reset"]],function(n,s,a){var e=!0,t=n.component;return"submit"===s&&(e=!1!==l["\u0275nov"](n,2).onSubmit(a)&&e),"reset"===s&&(e=!1!==l["\u0275nov"](n,2).onReset()&&e),"ngSubmit"===s&&(e=!1!==t.submit()&&e),e},null,null)),l["\u0275did"](1,16384,null,0,i["\u0275angular_packages_forms_forms_bh"],[],null,null),l["\u0275did"](2,540672,null,0,i.FormGroupDirective,[[8,null],[8,null]],{form:[0,"form"]},{ngSubmit:"ngSubmit"}),l["\u0275prd"](2048,null,i.ControlContainer,null,[i.FormGroupDirective]),l["\u0275did"](4,16384,null,0,i.NgControlStatusGroup,[[4,i.ControlContainer]],null,null),(n()(),l["\u0275eld"](5,0,null,null,2,"formly-form",[],null,null,null,Nn.b,Nn.a)),l["\u0275prd"](512,null,Rn.a,Rn.a,[W.b,l.ComponentFactoryResolver,l.Injector]),l["\u0275did"](7,966656,null,0,Sn.a,[Rn.a,W.b,[8,null],[2,i.FormGroupDirective]],{form:[0,"form"],model:[1,"model"],fields:[2,"fields"],options:[3,"options"]},null),(n()(),l["\u0275eld"](8,0,null,null,1,"button",[["class","btn btn-primary submit-button"],["type","submit"]],[[8,"disabled",0]],null,null,null,null)),(n()(),l["\u0275ted"](-1,null,["Submit"]))],function(n,s){var a=s.component;n(s,2,0,a.form),n(s,7,0,a.form,a.model,a.fields,a.options)},function(n,s){var a=s.component;n(s,0,0,l["\u0275nov"](s,4).ngClassUntouched,l["\u0275nov"](s,4).ngClassTouched,l["\u0275nov"](s,4).ngClassPristine,l["\u0275nov"](s,4).ngClassDirty,l["\u0275nov"](s,4).ngClassValid,l["\u0275nov"](s,4).ngClassInvalid,l["\u0275nov"](s,4).ngClassPending),n(s,8,0,!a.form.valid)})}function Bn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,1,"formly-app-example",[],null,null,null,$n,Un)),l["\u0275did"](1,49152,null,0,O,[u],null,null)],null,null)}var Pn=l["\u0275ccf"]("formly-app-example",O,Bn,{},{},[]),En=l["\u0275crt"]({encapsulation:2,styles:[],data:{}});function zn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,9,"form",[["novalidate",""]],[[2,"ng-untouched",null],[2,"ng-touched",null],[2,"ng-pristine",null],[2,"ng-dirty",null],[2,"ng-valid",null],[2,"ng-invalid",null],[2,"ng-pending",null]],[[null,"ngSubmit"],[null,"submit"],[null,"reset"]],function(n,s,a){var e=!0,t=n.component;return"submit"===s&&(e=!1!==l["\u0275nov"](n,2).onSubmit(a)&&e),"reset"===s&&(e=!1!==l["\u0275nov"](n,2).onReset()&&e),"ngSubmit"===s&&(e=!1!==t.submit()&&e),e},null,null)),l["\u0275did"](1,16384,null,0,i["\u0275angular_packages_forms_forms_bh"],[],null,null),l["\u0275did"](2,540672,null,0,i.FormGroupDirective,[[8,null],[8,null]],{form:[0,"form"]},{ngSubmit:"ngSubmit"}),l["\u0275prd"](2048,null,i.ControlContainer,null,[i.FormGroupDirective]),l["\u0275did"](4,16384,null,0,i.NgControlStatusGroup,[[4,i.ControlContainer]],null,null),(n()(),l["\u0275eld"](5,0,null,null,2,"formly-form",[],null,null,null,Nn.b,Nn.a)),l["\u0275prd"](512,null,Rn.a,Rn.a,[W.b,l.ComponentFactoryResolver,l.Injector]),l["\u0275did"](7,966656,null,0,Sn.a,[Rn.a,W.b,[8,null],[2,i.FormGroupDirective]],{form:[0,"form"],model:[1,"model"],fields:[2,"fields"],options:[3,"options"]},null),(n()(),l["\u0275eld"](8,0,null,null,1,"button",[["class","btn btn-primary submit-button"],["type","submit"]],[[8,"disabled",0]],null,null,null,null)),(n()(),l["\u0275ted"](-1,null,["Submit"]))],function(n,s){var a=s.component;n(s,2,0,a.form),n(s,7,0,a.form,a.model,a.fields,a.options)},function(n,s){var a=s.component;n(s,0,0,l["\u0275nov"](s,4).ngClassUntouched,l["\u0275nov"](s,4).ngClassTouched,l["\u0275nov"](s,4).ngClassPristine,l["\u0275nov"](s,4).ngClassDirty,l["\u0275nov"](s,4).ngClassValid,l["\u0275nov"](s,4).ngClassInvalid,l["\u0275nov"](s,4).ngClassPending),n(s,8,0,!a.form.valid)})}function Yn(n){return l["\u0275vid"](0,[(n()(),l["\u0275eld"](0,0,null,null,1,"formly-app-example",[],null,null,null,zn,En)),l["\u0275did"](1,49152,null,0,V,[u],null,null)],null,null)}var Zn=l["\u0275ccf"]("formly-app-example",V,Yn,{},{},[]),Qn=a("M2Lx"),Wn=a("eDkP"),Xn=a("Fzqc"),Hn=a("v9Dh"),Kn=a("ZYjt"),ns=a("Wf4p"),ss=a("6LlJ"),as=a("F6kA"),ls=a("dWZg"),es=a("lLAP"),ts=a("4c35"),ps=a("qAlS"),os=a("La40"),rs=a("SMsm"),is=a("UodH"),ms=a("5QwG"),cs=a("qkla"),us=a("iZhS"),ds=a("me7w"),hs=a("N3PW"),gs=a("l4pn"),fs=a("Fv2i"),js=a("wBYW"),ys=a("IE48"),bs=a("Q4Tx"),xs=a("XR12"),vs=a("Nsh5"),ks=a("8mMr"),ws=a("mqvi"),Fs=a("lYui"),Cs=a("VGFS"),Ms=a("1ey0"),Os=a("ZYCi"),As=a("cIcG");a.d(s,"ConfigModuleNgFactory",function(){return Ts});var Ts=l["\u0275cmf"](G,[],function(n){return l["\u0275mod"]([l["\u0275mpd"](512,l.ComponentFactoryResolver,l["\u0275CodegenComponentFactoryResolver"],[[8,[_.a,J.a,q.a,D.a,U.a,$.a,B.a,P.a,E.a,z.a,Y.a,tn,dn,xn,On,An.a,Tn.a,Gn,Dn,Pn,Zn]],[3,l.ComponentFactoryResolver],l.NgModuleRef]),l["\u0275mpd"](4608,X.NgLocalization,X.NgLocaleLocalization,[l.LOCALE_ID,[2,X["\u0275angular_packages_common_common_a"]]]),l["\u0275mpd"](4608,Qn.c,Qn.c,[]),l["\u0275mpd"](4608,Wn.c,Wn.c,[Wn.i,Wn.e,l.ComponentFactoryResolver,Wn.h,Wn.f,l.Injector,l.NgZone,X.DOCUMENT,Xn.b,[2,X.Location]]),l["\u0275mpd"](5120,Wn.j,Wn.k,[Wn.c]),l["\u0275mpd"](5120,Hn.b,Hn.c,[Wn.c]),l["\u0275mpd"](4608,Kn.HAMMER_GESTURE_CONFIG,ns.c,[[2,ns.g],[2,ns.l]]),l["\u0275mpd"](4608,ss.a,ss.a,[]),l["\u0275mpd"](4608,as.a,as.a,[]),l["\u0275mpd"](4608,i.FormBuilder,i.FormBuilder,[]),l["\u0275mpd"](4608,i["\u0275angular_packages_forms_forms_j"],i["\u0275angular_packages_forms_forms_j"],[]),l["\u0275mpd"](4608,Rn.a,Rn.a,[W.b,l.ComponentFactoryResolver,l.Injector]),l["\u0275mpd"](1073742336,X.CommonModule,X.CommonModule,[]),l["\u0275mpd"](1073742336,ls.b,ls.b,[]),l["\u0275mpd"](1073742336,Qn.d,Qn.d,[]),l["\u0275mpd"](1073742336,es.a,es.a,[]),l["\u0275mpd"](1073742336,Xn.a,Xn.a,[]),l["\u0275mpd"](1073742336,ts.g,ts.g,[]),l["\u0275mpd"](1073742336,ps.c,ps.c,[]),l["\u0275mpd"](1073742336,Wn.g,Wn.g,[]),l["\u0275mpd"](1073742336,ns.l,ns.l,[[2,ns.d],[2,Kn.HAMMER_LOADER]]),l["\u0275mpd"](1073742336,Hn.e,Hn.e,[]),l["\u0275mpd"](1073742336,ns.v,ns.v,[]),l["\u0275mpd"](1073742336,os.j,os.j,[]),l["\u0275mpd"](1073742336,rs.c,rs.c,[]),l["\u0275mpd"](1073742336,is.c,is.c,[]),l["\u0275mpd"](1073742336,ms.b,ms.b,[]),l["\u0275mpd"](512,W.b,W.b,[]),l["\u0275mpd"](1024,W.a,function(n,s,a,l){return[{wrappers:[{name:"addons",component:cs.a}],extensions:[{name:"addons",extension:{postPopulate:us.a}}]},{types:[{name:"input",component:ds.a,wrappers:["form-field"]},{name:"checkbox",component:hs.a,wrappers:["form-field"]},{name:"radio",component:gs.a,wrappers:["form-field"]},{name:"select",component:fs.a,wrappers:["form-field"]},{name:"textarea",component:js.a,wrappers:["form-field"]},{name:"multicheckbox",component:ys.a,wrappers:["form-field"]}],wrappers:[{name:"form-field",component:bs.a}]},xs.b(n),{validationMessages:[{name:"required",message:"This field is required"},{name:"minlength",message:e},{name:"maxlength",message:t},{name:"min",message:p},{name:"max",message:o}],types:[{name:"string",extends:"input"},{name:"number",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"integer",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"object",extends:"formly-group"},{name:"boolean",extends:"checkbox"},{name:"array",component:K},{name:"enum",extends:"select"}]},xs.b(s),{validationMessages:[{name:"required",message:"This field is required"},{name:"minlength",message:g},{name:"maxlength",message:f},{name:"min",message:j},{name:"max",message:y}],types:[{name:"string",extends:"input"},{name:"number",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"integer",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"object",extends:"formly-group"},{name:"boolean",extends:"checkbox"},{name:"array",component:pn},{name:"enum",extends:"select"}]},xs.b(a),{validationMessages:[{name:"required",message:"This field is required"},{name:"minlength",message:k},{name:"maxlength",message:w},{name:"min",message:F},{name:"max",message:C}],types:[{name:"string",extends:"input"},{name:"number",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"integer",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"object",extends:"formly-group"},{name:"boolean",extends:"checkbox"},{name:"array",component:hn},{name:"enum",extends:"select"}]},xs.b(l),{validationMessages:[{name:"required",message:"This field is required"},{name:"minlength",message:T},{name:"maxlength",message:N},{name:"min",message:R},{name:"max",message:S}],types:[{name:"string",extends:"input"},{name:"number",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"integer",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"object",extends:"formly-group"},{name:"boolean",extends:"checkbox"},{name:"array",component:vn},{name:"enum",extends:"select"}]}]},[W.b,W.b,W.b,W.b]),l["\u0275mpd"](1073742336,xs.a,xs.a,[W.b,[2,W.a]]),l["\u0275mpd"](1073742336,vs.h,vs.h,[]),l["\u0275mpd"](1073742336,ks.b,ks.b,[]),l["\u0275mpd"](1073742336,ws.a,ws.a,[]),l["\u0275mpd"](1073742336,i["\u0275angular_packages_forms_forms_bc"],i["\u0275angular_packages_forms_forms_bc"],[]),l["\u0275mpd"](1073742336,i.ReactiveFormsModule,i.ReactiveFormsModule,[]),l["\u0275mpd"](1073742336,Fs.a,Fs.a,[]),l["\u0275mpd"](1073742336,Cs.a,Cs.a,[]),l["\u0275mpd"](1073742336,Ms.a,Ms.a,[]),l["\u0275mpd"](1073742336,r,r,[]),l["\u0275mpd"](1073742336,b,b,[]),l["\u0275mpd"](1073742336,M,M,[]),l["\u0275mpd"](1073742336,I,I,[]),l["\u0275mpd"](1073742336,Os.s,Os.s,[[2,Os.y],[2,Os.p]]),l["\u0275mpd"](1073742336,G,G,[]),l["\u0275mpd"](1024,Os.n,function(){return[[{path:"",component:As.a,data:L}]]},[])])})},mfii:function(n,s){n.exports="import { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFormOptions, FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyJsonschema } from '@ngx-formly/core/json-schema';\n\n@Component({\n  selector: 'formly-app-example',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  form = new FormGroup({});\n  model: any = {\n    'listOfStrings': [\n      'foo',\n      'bar',\n      'bazinga',\n    ],\n    'multipleChoicesList': [\n      'foo',\n      'bar',\n    ],\n    'fixedItemsList': [\n      'Some text',\n      true,\n      123,\n    ],\n    // 'minItemsList': [\n    //   {\n    //     'name': 'Default name',\n    //   },\n    //   {\n    //     'name': 'Default name',\n    //   },\n    //   {\n    //     'name': 'Default name',\n    //   },\n    // ],\n    // 'defaultsAndMinItems': [\n    //   'carp',\n    //   'trout',\n    //   'bream',\n    //   'unidentified',\n    //   'unidentified',\n    // ],\n    // 'nestedList': [\n    //   [\n    //     'lorem',\n    //     'ipsum',\n    //   ],\n    //   [\n    //     'dolor',\n    //   ],\n    // ],\n    // 'unorderable': [\n    //   'one',\n    //   'two',\n    // ],\n    // 'unremovable': [\n    //   'one',\n    //   'two',\n    // ],\n    // 'noToolbar': [\n    //   'one',\n    //   'two',\n    // ],\n    // 'fixedNoToolbar': [\n    //   42,\n    //   true,\n    //   'additional item one',\n    //   'additional item two',\n    // ],\n  };\n  options: FormlyFormOptions = {};\n\n  fields: FormlyFieldConfig[] = [this.formlyJsonschema.toFieldConfig({\n    'definitions': {\n      'Thing': {\n        'type': 'object',\n        'properties': {\n          'name': {\n            'type': 'string',\n            'default': 'Default name',\n          },\n        },\n      },\n    },\n    'type': 'object',\n    'properties': {\n      'listOfStrings': {\n        'type': 'array',\n        'title': 'A list of strings',\n        'items': {\n          'type': 'string',\n          'default': 'bazinga',\n        },\n      },\n      'multipleChoicesList': {\n        'type': 'array',\n        'title': 'A multiple choices list',\n        'items': {\n          'type': 'string',\n          'enum': [\n            'foo',\n            'bar',\n            'fuzz',\n            'qux',\n          ],\n        },\n        'uniqueItems': true,\n      },\n      'fixedItemsList': {\n        'type': 'array',\n        'title': 'A list of fixed items',\n        'items': [\n          {\n            'title': 'A string value',\n            'type': 'string',\n            'default': 'lorem ipsum',\n          },\n          {\n            'title': 'a boolean value',\n            'type': 'boolean',\n          },\n        ],\n        'additionalItems': {\n          'title': 'Additional item',\n          'type': 'number',\n        },\n      },\n      // 'minItemsList': {\n      //   'type': 'array',\n      //   'title': 'A list with a minimal number of items',\n      //   'minItems': 3,\n      //   'items': {\n      //     '$ref': '#/definitions/Thing',\n      //   },\n      // },\n      // 'defaultsAndMinItems': {\n      //   'type': 'array',\n      //   'title': 'List and item level defaults',\n      //   'minItems': 5,\n      //   'default': [\n      //     'carp',\n      //     'trout',\n      //     'bream',\n      //   ],\n      //   'items': {\n      //     'type': 'string',\n      //     'default': 'unidentified',\n      //   },\n      // },\n      // 'nestedList': {\n      //   'type': 'array',\n      //   'title': 'Nested list',\n      //   'items': {\n      //     'type': 'array',\n      //     'title': 'Inner list',\n      //     'items': {\n      //       'type': 'string',\n      //       'default': 'lorem ipsum',\n      //     },\n      //   },\n      // },\n      // 'unorderable': {\n      //   'title': 'Unorderable items',\n      //   'type': 'array',\n      //   'items': {\n      //     'type': 'string',\n      //     'default': 'lorem ipsum',\n      //   },\n      // },\n      // 'unremovable': {\n      //   'title': 'Unremovable items',\n      //   'type': 'array',\n      //   'items': {\n      //     'type': 'string',\n      //     'default': 'lorem ipsum',\n      //   },\n      // },\n      // 'noToolbar': {\n      //   'title': 'No add, remove and order buttons',\n      //   'type': 'array',\n      //   'items': {\n      //     'type': 'string',\n      //     'default': 'lorem ipsum',\n      //   },\n      // },\n      // 'fixedNoToolbar': {\n      //   'title': 'Fixed array without buttons',\n      //   'type': 'array',\n      //   'items': [\n      //     {\n      //       'title': 'A number',\n      //       'type': 'number',\n      //       'default': 42,\n      //     },\n      //     {\n      //       'title': 'A boolean',\n      //       'type': 'boolean',\n      //       'default': false,\n      //     },\n      //   ],\n      //   'additionalItems': {\n      //     'title': 'A string',\n      //     'type': 'string',\n      //     'default': 'lorem ipsum',\n      //   },\n      // },\n    },\n  })];\n\n  constructor(private formlyJsonschema: FormlyJsonschema) {}\n\n  submit() {\n    alert(JSON.stringify(this.model));\n  }\n}\n"},mkUL:function(n,s){n.exports="import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\nimport { AppComponent } from './app.component';\nimport { ArrayTypeComponent } from './array.type';\n\nexport function minlengthValidationMessage(err, field) {\n  return `Should have atleast ${field.templateOptions.minLength} characters`;\n}\n\nexport function maxlengthValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.maxLength} characters`;\n}\n\nexport function minValidationMessage(err, field) {\n  return `This value should be more than ${field.templateOptions.min}`;\n}\n\nexport function maxValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.max}`;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: 'required', message: 'This field is required' },\n        { name: 'minlength', message: minlengthValidationMessage },\n        { name: 'maxlength', message: maxlengthValidationMessage },\n        { name: 'min', message: minValidationMessage },\n        { name: 'max', message: maxValidationMessage },\n      ],\n      types: [\n        { name: 'string', extends: 'input' },\n        {\n          name: 'number',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        {\n          name: 'integer',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        { name: 'object', extends: 'formly-group' },\n        { name: 'boolean', extends: 'checkbox' },\n        { name: 'array', component: ArrayTypeComponent },\n        { name: 'enum', extends: 'select' },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n  ],\n})\nexport class AppModule { }\n"},pZPy:function(n,s){n.exports="import { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFormOptions, FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyJsonschema } from '@ngx-formly/core/json-schema';\n\n@Component({\n  selector: 'formly-app-example',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  form = new FormGroup({});\n  model: any = {\n    'title': 'My current tasks',\n    'tasks': [\n      {\n        'title': 'My first task',\n        'details': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n        'done': true,\n      },\n      {\n        'title': 'My second task',\n        'details': 'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur',\n        'done': false,\n      },\n    ],\n  };\n  options: FormlyFormOptions = {};\n\n  fields: FormlyFieldConfig[] = [this.formlyJsonschema.toFieldConfig({\n    'title': 'A list of tasks',\n    'type': 'object',\n    'required': [\n      'title',\n    ],\n    'properties': {\n      'title': {\n        'type': 'string',\n        'title': 'Task list title',\n      },\n      'tasks': {\n        'type': 'array',\n        'title': 'Tasks',\n        'items': {\n          'type': 'object',\n          'required': [\n            'title',\n          ],\n          'properties': {\n            'title': {\n              'type': 'string',\n              'title': 'Title',\n              'description': 'A sample title',\n            },\n            'details': {\n              'type': 'string',\n              'title': 'Task details',\n              'description': 'Enter the task details',\n            },\n            'done': {\n              'type': 'boolean',\n              'title': 'Done?',\n              'default': false,\n            },\n          },\n        },\n      },\n    },\n  })];\n\n  constructor(private formlyJsonschema: FormlyJsonschema) {}\n\n  submit() {\n    alert(JSON.stringify(this.model));\n  }\n}\n"},rEfR:function(n,s){n.exports="import { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFormOptions, FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyJsonschema } from '@ngx-formly/core/json-schema';\n\n@Component({\n  selector: 'formly-app-example',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  form = new FormGroup({});\n  model: any = {\n    'number': 3.14,\n    'integer': 42,\n    'numberEnum': 2,\n    'integerRange': 42,\n    'integerRangeSteps': 80,\n  };\n  options: FormlyFormOptions = {};\n\n  fields: FormlyFieldConfig[] = [this.formlyJsonschema.toFieldConfig({\n    'type': 'object',\n    'title': 'Number fields & widgets',\n    'properties': {\n      'number': {\n        'title': 'Number',\n        'type': 'number',\n      },\n      'integer': {\n        'title': 'Integer',\n        'type': 'integer',\n      },\n      'numberEnum': {\n        'type': 'number',\n        'title': 'Number enum',\n        'enum': [\n          1,\n          2,\n          3,\n        ],\n      },\n      'numberEnumRadio': {\n        'type': 'number',\n        'title': 'Number enum',\n        'enum': [\n          1,\n          2,\n          3,\n        ],\n      },\n      'integerRange': {\n        'title': 'Integer range',\n        'type': 'integer',\n        'minimum': 42,\n        'maximum': 100,\n      },\n      'integerRangeSteps': {\n        'title': 'Integer range (by 10)',\n        'type': 'integer',\n        'minimum': 50,\n        'maximum': 100,\n        'multipleOf': 10,\n      },\n    },\n  })];\n\n  constructor(private formlyJsonschema: FormlyJsonschema) {}\n\n  submit() {\n    alert(JSON.stringify(this.model));\n  }\n}\n"},uYKB:function(n,s){n.exports="import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\nimport { AppComponent } from './app.component';\nimport { ArrayTypeComponent } from './array.type';\n\nexport function minlengthValidationMessage(err, field) {\n  return `Should have atleast ${field.templateOptions.minLength} characters`;\n}\n\nexport function maxlengthValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.maxLength} characters`;\n}\n\nexport function minValidationMessage(err, field) {\n  return `This value should be more than ${field.templateOptions.min}`;\n}\n\nexport function maxValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.max}`;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: 'required', message: 'This field is required' },\n        { name: 'minlength', message: minlengthValidationMessage },\n        { name: 'maxlength', message: maxlengthValidationMessage },\n        { name: 'min', message: minValidationMessage },\n        { name: 'max', message: maxValidationMessage },\n      ],\n      types: [\n        { name: 'string', extends: 'input' },\n        {\n          name: 'number',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        {\n          name: 'integer',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        { name: 'object', extends: 'formly-group' },\n        { name: 'boolean', extends: 'checkbox' },\n        { name: 'array', component: ArrayTypeComponent },\n        { name: 'enum', extends: 'select' },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n  ],\n})\nexport class AppModule { }\n"},vrIJ:function(n,s){n.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FieldArrayType } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'formly-array-type\'</span>,\n  template: <span class="hljs-string">`\n    &lt;legend *ngIf="to.label"&gt;{{ to.label }}&lt;/legend&gt;\n    &lt;div *ngFor="let field of field.fieldGroup;let i = index;" class="row"&gt;\n      &lt;formly-field class="col-sm-10" [field]="field"&gt;&lt;/formly-field&gt;\n      &lt;div class="col-sm-2"&gt;\n        &lt;button class="btn btn-danger" type="button" (click)="remove(i)"&gt;Remove&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class="text-right"&gt;\n      &lt;button class="btn btn-primary" type="button" (click)="add()"&gt;Add&lt;/button&gt;\n    &lt;/div&gt;\n  `</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> ArrayTypeComponent <span class="hljs-keyword">extends</span> FieldArrayType {}\n'},w5YM:function(n,s){n.exports='<span class="hljs-tag">&lt;<span class="hljs-name">form</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">"form"</span> (<span class="hljs-attr">ngSubmit</span>)=<span class="hljs-string">"submit()"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">formly-form</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span> [<span class="hljs-attr">fields</span>]=<span class="hljs-string">"fields"</span> [<span class="hljs-attr">options</span>]=<span class="hljs-string">"options"</span> [<span class="hljs-attr">form</span>]=<span class="hljs-string">"form"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">formly-form</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary submit-button"</span> [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">"!form.valid"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n'},"yUU/":function(n,s){n.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FormGroup } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { FormlyFormOptions, FormlyFieldConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n<span class="hljs-keyword">import</span> { FormlyJsonschema } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core/json-schema\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'formly-app-example\'</span>,\n  templateUrl: <span class="hljs-string">\'./app.component.html\'</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent {\n  form = <span class="hljs-keyword">new</span> FormGroup({});\n  model: <span class="hljs-built_in">any</span> = {\n    <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'My current tasks\'</span>,\n    <span class="hljs-string">\'tasks\'</span>: [\n      {\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'My first task\'</span>,\n        <span class="hljs-string">\'details\'</span>: <span class="hljs-string">\'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\'</span>,\n        <span class="hljs-string">\'done\'</span>: <span class="hljs-literal">true</span>,\n      },\n      {\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'My second task\'</span>,\n        <span class="hljs-string">\'details\'</span>: <span class="hljs-string">\'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur\'</span>,\n        <span class="hljs-string">\'done\'</span>: <span class="hljs-literal">false</span>,\n      },\n    ],\n  };\n  options: FormlyFormOptions = {};\n\n  fields: FormlyFieldConfig[] = [<span class="hljs-keyword">this</span>.formlyJsonschema.toFieldConfig({\n    <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'A list of tasks\'</span>,\n    <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'object\'</span>,\n    <span class="hljs-string">\'required\'</span>: [\n      <span class="hljs-string">\'title\'</span>,\n    ],\n    <span class="hljs-string">\'properties\'</span>: {\n      <span class="hljs-string">\'title\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'string\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Task list title\'</span>,\n      },\n      <span class="hljs-string">\'tasks\'</span>: {\n        <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'array\'</span>,\n        <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Tasks\'</span>,\n        <span class="hljs-string">\'items\'</span>: {\n          <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'object\'</span>,\n          <span class="hljs-string">\'required\'</span>: [\n            <span class="hljs-string">\'title\'</span>,\n          ],\n          <span class="hljs-string">\'properties\'</span>: {\n            <span class="hljs-string">\'title\'</span>: {\n              <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'string\'</span>,\n              <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Title\'</span>,\n              <span class="hljs-string">\'description\'</span>: <span class="hljs-string">\'A sample title\'</span>,\n            },\n            <span class="hljs-string">\'details\'</span>: {\n              <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'string\'</span>,\n              <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Task details\'</span>,\n              <span class="hljs-string">\'description\'</span>: <span class="hljs-string">\'Enter the task details\'</span>,\n            },\n            <span class="hljs-string">\'done\'</span>: {\n              <span class="hljs-string">\'type\'</span>: <span class="hljs-string">\'boolean\'</span>,\n              <span class="hljs-string">\'title\'</span>: <span class="hljs-string">\'Done?\'</span>,\n              <span class="hljs-string">\'default\'</span>: <span class="hljs-literal">false</span>,\n            },\n          },\n        },\n      },\n    },\n  })];\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> formlyJsonschema: FormlyJsonschema</span>) {}\n\n  submit() {\n    alert(<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-keyword">this</span>.model));\n  }\n}\n'},yZfe:function(n,s){n.exports='import { Component } from \'@angular/core\';\nimport { FieldArrayType } from \'@ngx-formly/core\';\n\n@Component({\n  selector: \'formly-array-type\',\n  template: `\n    <legend *ngIf="to.label">{{ to.label }}</legend>\n    <div *ngFor="let field of field.fieldGroup;let i = index;" class="row">\n      <formly-field class="col-sm-10" [field]="field"></formly-field>\n      <div class="col-sm-2">\n        <button class="btn btn-danger" type="button" (click)="remove(i)">Remove</button>\n      </div>\n    </div>\n    <div class="text-right">\n      <button class="btn btn-primary" type="button" (click)="add()">Add</button>\n    </div>\n  `,\n})\nexport class ArrayTypeComponent extends FieldArrayType {}\n'}}]);
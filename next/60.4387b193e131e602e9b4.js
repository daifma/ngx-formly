(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{AVrm:function(s,n){s.exports='<h1 id="properties-and-options">Properties and Options</h1>\n<h2 id="formly-form">Formly Form</h2>\n<p>Everything starts with the <code>formly-form</code>. General use of it will look something like this:</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">formly-form</span>\n  [<span class="hljs-attr">form</span>]=<span class="hljs-string">&quot;form&quot;</span>\n  [<span class="hljs-attr">fields</span>]=<span class="hljs-string">&quot;fields&quot;</span>\n  [<span class="hljs-attr">model</span>]=<span class="hljs-string">&quot;model&quot;</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">formly-form</span>&gt;</span></pre>\n<h3 id="inputs">Inputs</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>form</td>\n<td><code>FormGroup or FormArray</code></td>\n<td><code>new FormGroup({})</code></td>\n<td>no</td>\n<td>The form instance which allow to track model value and validation status.</td>\n</tr>\n<tr>\n<td>fields</td>\n<td><code>FormlyFieldConfig[]</code></td>\n<td></td>\n<td>yes</td>\n<td>The field configurations for building the form.</td>\n</tr>\n<tr>\n<td>model</td>\n<td><code>any</code></td>\n<td></td>\n<td>yes</td>\n<td>The model to be represented by the form.</td>\n</tr>\n<tr>\n<td>options</td>\n<td><code>FormlyFormOptions</code></td>\n<td></td>\n<td>no</td>\n<td>Options for the form.</td>\n</tr>\n</tbody></table>\n<h3 id="outputs">Outputs</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(modelChange)</td>\n<td>Fired on model value change</td>\n</tr>\n</tbody></table>\n<h2 id="fields">fields</h2>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>key</td>\n<td><code>string</code></td>\n<td>The key that relates to the model. This will link the field value to the model.</td>\n</tr>\n<tr>\n<td>id</td>\n<td><code>string</code></td>\n<td>This allows you to specify the <code>id</code> of your field. Note, the <code>id</code> is generated if not set.</td>\n</tr>\n<tr>\n<td>name</td>\n<td><code>string</code></td>\n<td>If you wish, you can specify a specific <code>name</code> for your field. This is useful if you&apos;re posting the form to a server using techniques of yester-year.</td>\n</tr>\n<tr>\n<td>type</td>\n<td><code>string</code></td>\n<td>The <code>type</code> of field to be rendered. More information over at Custom templates.</td>\n</tr>\n<tr>\n<td>component</td>\n<td><code>any</code></td>\n<td>Can be set to replace the component that is defined in <code>type</code>.</td>\n</tr>\n<tr>\n<td>className</td>\n<td><code>string</code></td>\n<td>You can specify your own class that will be applied to the <code>formly-field</code> directive.</td>\n</tr>\n<tr>\n<td>templateOptions</td>\n<td><code>object</code></td>\n<td>This is reserved for the templates. Any template-specific options go in here. Look at your specific template implementation to know the options required for this.</td>\n</tr>\n<tr>\n<td>template</td>\n<td><code>string</code></td>\n<td>Can be set instead of <code>type</code> to render custom <code>html</code> content.</td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td><code>any</code></td>\n<td>If this is provided and the value of the model at compile-time is <code>undefined</code>, then the value of the model will be assigned the defaultValue.</td>\n</tr>\n<tr>\n<td>hide</td>\n<td><code>boolean</code></td>\n<td>Whether to hide the field. Defaults to false. If you wish this to be conditional use <code>hideExpression</code>.</td>\n</tr>\n<tr>\n<td>hideExpression</td>\n<td><code>boolean or string or function</code></td>\n<td>Conditionally hide the field based on values from other fields.</td>\n</tr>\n<tr>\n<td>expressionProperties</td>\n<td><code>boolean or string or function</code></td>\n<td>An object where the key is a property to be set on the main field config and the value is an expression used to assign that property.</td>\n</tr>\n<tr>\n<td>focus</td>\n<td><code>boolean</code></td>\n<td>Whether to focus or blur the element field. Defaults to false. If you wish this to be conditional use <code>expressionProperties</code></td>\n</tr>\n<tr>\n<td>wrappers</td>\n<td><code>string[]</code></td>\n<td>It is expected to be the name of the wrappers. The formly field template will be wrapped by the first wrapper, then the second, then the third, etc. You can also specify these as part of a type (which is the recommended approach).</td>\n</tr>\n<tr>\n<td>parsers</td>\n<td><code>function[]</code></td>\n<td>Array of functions to execute, as a pipeline, whenever the model updates, usually via user input.</td>\n</tr>\n<tr>\n<td>fieldGroup</td>\n<td><code>FormlyFieldConfig[]</code></td>\n<td>A field group is a way to group fields together, making advanced layout very simple. It can also be used to group fields that are associated with the same model (useful if it&apos;s different than the model for the rest of the fields).</td>\n</tr>\n<tr>\n<td>fieldArray</td>\n<td><code>FormlyFieldConfig</code></td>\n<td></td>\n</tr>\n<tr>\n<td>fieldGroupClassName</td>\n<td><code>string</code></td>\n<td>Specify your own class that will be applied to the <code>formly-group</code> component.</td>\n</tr>\n<tr>\n<td>validation</td>\n<td><code>object</code></td>\n<td>An object with a few useful properties: messages, show</td>\n</tr>\n<tr>\n<td>validators</td>\n<td><code>any</code></td>\n<td>Used to set validation rules for a particular field. Should be an object of key - value pairs. The value can either be an expression to evaluate or a function to run. Each should return a boolean value, returning true when the field is valid. See Validation for more information.</td>\n</tr>\n<tr>\n<td>asyncValidators</td>\n<td><code>any</code></td>\n<td>Use this one for anything that needs to validate asynchronously. Pretty much exactly the same as the validators api, except it must be a function that returns a promise.</td>\n</tr>\n<tr>\n<td>formControl</td>\n<td><code>AbstractControl</code></td>\n<td>This is the <a href="https://angular.io/api/forms/FormControl">FormControl</a> for the field. It provides you more control like running validators, calculating status, and resetting state.</td>\n</tr>\n<tr>\n<td>modelOptions</td>\n<td><code>object</code></td>\n<td>An object with a few useful properties to control the model changes: <code>debounce</code>, <code>updateOn</code></td>\n</tr>\n</tbody></table>\n<h2 id="options">options</h2>\n<h3 id="formstate">formState</h3>\n<p>The <code>formState</code> property is passed to all fields and is a mechanism for communicating between fields (without having to mess with your model).</p>\n<h3 id="resetmodel-and-updateinitialvalue">resetModel and updateInitialValue</h3>\n<p>This also receives the methods <code>resetModel</code> and <code>updateInitialValue</code> which will invoke all of the field&apos;s resetModel and updateInitialValue respectively.</p>\n<h3 id="fieldtransform">fieldTransform</h3>\n<p>Allows you to modify/convert the fields before Formly handles them or validates them.</p>\n'},Dthz:function(s,n){s.exports='<h1 id="validation">Validation</h1>\n<h2 id="custom-validation">Custom Validation</h2>\n<p>Formly offers different methods to implement custom validations.</p>\n<h4 id="1-declaring-validation-function-and-message-within-ngmodule-declaration">1. Declaring validation function and message within NgModule declaration.</h4>\n<h5 id="custom-validation-message">CUSTOM VALIDATION MESSAGE</h5>\n<p>To define a custom validation message, you need to add an object with two properties: <code>name</code> and <code>message</code>. You will include this object to the validationMessages array of the FormlyModule config:</p>\n<p>The message property could be simply a string or be defined as a function which receives the <em>error</em> and the <em>field</em> (FormlyFieldConfig) that was validated as input. The last one allows you more customization, like including the value, the  min or max value allowed, etc.</p>\n<p>The following code example shows how to include a new message &quot;ip&quot; with a function to generate the string message by using the formControl.value and a new message &quot;required&quot; as a simple string.</p>\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">IpValidatorMessage</span>(<span class="hljs-params">err, field: FormlyFieldConfig</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`&quot;<span class="hljs-subst">${field.formControl.value}</span>&quot; is not a valid IP Address`</span>;\n}\n...\n<span class="hljs-meta">@NgModule</span>({\n  imports: [\n    ...\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: <span class="hljs-string">&apos;ip&apos;</span>, message: IpValidatorMessage },\n        { name: <span class="hljs-string">&apos;required&apos;</span>, message: <span class="hljs-string">&apos;This field is required&apos;</span> },\n      ],\n    }),\n  ]\n})</pre>\n<h5 id="custom-validation-function">CUSTOM VALIDATION FUNCTION</h5>\n<p>The validation function receives the <code>FormControl</code> as input and it will return <code>null</code> if there is not error, and otherwise it will send an object which property is set as <code>true</code>.  The name of the property must be the same as the name set to the error message for this validation.</p>\n<p>The following code example shows a function to validate an IP. As can be seen, the object returned when there is an error has a property called &apos;ip&apos; which matches with the name of the custom validation message.</p>\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">IpValidator</span>(<span class="hljs-params">control: FormControl</span>): <span class="hljs-title">ValidationErrors</span> </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/(\\d{1,3}\\.){3}\\d{1,3}/</span>.test(control.value) ? <span class="hljs-literal">null</span> : { <span class="hljs-string">&apos;ip&apos;</span>: <span class="hljs-literal">true</span> };\n}\n...\n<span class="hljs-meta">@NgModule</span>({\n  imports: [\n    ...\n    FormlyModule.forRoot({\n      validators: [\n        { name: <span class="hljs-string">&apos;ip&apos;</span>, validation: IpValidator },\n      ],\n      validationMessages: [\n        { name: <span class="hljs-string">&apos;ip&apos;</span>, message: IpValidatorMessage },\n        { name: <span class="hljs-string">&apos;required&apos;</span>, message: <span class="hljs-string">&apos;This field is required&apos;</span> },\n      ],\n    }),\n  ]\n})</pre>\n<p><strong>ALERT!</strong> If your function is async, you need to include it within <code>asyncValidators</code> property:</p>\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ipAsyncValidator</span>(<span class="hljs-params">control: FormControl</span>): <span class="hljs-title">Promise</span> </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n        <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/(\\d{1,3}\\.){3}\\d{1,3}/</span>.test(control.value)) {\n              resolve({ <span class="hljs-string">&apos;ip&apos;</span>: <span class="hljs-literal">true</span> });\n        } <span class="hljs-keyword">else</span> {\n              resolve(<span class="hljs-literal">null</span>);\n        }\n    }, <span class="hljs-number">1000</span>);\n  });\n}\n...\nFormlyModule.forRoot({\n  asyncValidators: [\n    { name: <span class="hljs-string">&apos;ipAsync&apos;</span>, validation: ipAsyncValidator },\n  ],\n})</pre>\n<h5 id="field-with-custom-validation">FIELD WITH CUSTOM VALIDATION</h5>\n<p>You just need to include the name of the validate function, declared in <code>FormlyModule</code>, within the property <code>validators.validation</code>.</p>\n<pre class="hljs">{\n  key: <span class="hljs-string">&apos;ip&apos;</span>,\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n  templateOptions: {\n    label: <span class="hljs-string">&apos;IP Address (using custom validation declared in ngModule)&apos;</span>,\n    required: <span class="hljs-literal">true</span>,\n  },\n  validators: {\n    validation: [<span class="hljs-string">&apos;ip&apos;</span>],\n  },\n},</pre>\n<p><strong>ALERT!</strong> If the function is async, you need to include it within <code>asyncValidators.validation</code> property:</p>\n<pre class="hljs">{\n  key: <span class="hljs-string">&apos;ip&apos;</span>,\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n  templateOptions: {\n    label: <span class="hljs-string">&apos;IP Address (using custom validation declared in ngModule)&apos;</span>,\n    required: <span class="hljs-literal">true</span>,\n  },\n  asyncValidators: {\n    validation: [<span class="hljs-string">&apos;ipAsync&apos;</span>],\n  },\n},</pre>\n<h4 id="2-declaring-validation-function-within-field-definition">2. Declaring validation function within field definition.</h4>\n<h5 id="custom-validation-message-1">CUSTOM VALIDATION MESSAGE</h5>\n<p>[As the case above]</p>\n<h5 id="custom-validation-function-1">CUSTOM VALIDATION FUNCTION</h5>\n<p>You could implement the validation function within field definition. For instance, you could use this method if you want to use several validation functions with the same error message.</p>\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">IpValidator</span>(<span class="hljs-params">control: FormControl</span>): <span class="hljs-title">ValidationErrors</span> </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/(\\d{1,3}\\.){3}\\d{1,3}/</span>.test(control.value) ? <span class="hljs-literal">null</span> : { <span class="hljs-string">&apos;ip&apos;</span>: <span class="hljs-literal">true</span> };\n}</pre>\n<h5 id="field-with-custom-validation-1">FIELD WITH CUSTOM VALIDATION</h5>\n<p>You just need to include the validation function, declared wherever you want, within the property <code>validators.validation</code>.</p>\n<pre class="hljs">{\n  key: <span class="hljs-string">&apos;ip&apos;</span>,\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n  templateOptions: {\n    label: <span class="hljs-string">&apos;IP Address (using custom validation through `validators.validation` property)&apos;</span>,\n    required: <span class="hljs-literal">true</span>,\n  },\n  validators: {\n    validation: [IpValidator],\n  },\n},</pre>\n<p><strong>ALERT!</strong> If the function is async, you may need to define it in <code>asyncValidators.validation</code> property:</p>\n<pre class="hljs">{\n  key: <span class="hljs-string">&apos;ip&apos;</span>,\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n  templateOptions: {\n    label: <span class="hljs-string">&apos;IP Address (using custom validation through `validators.validation` property)&apos;</span>,\n    required: <span class="hljs-literal">true</span>,\n  },\n  asyncValidators: {\n    validation: [IpAsyncValidator],\n  },\n},</pre>\n<h4 id="3-declaring-validation-function-and-message-within-field-definition">3. Declaring validation function and message within field definition.</h4>\n<h5 id="custom-validation-message-and-custom-validation-function">CUSTOM VALIDATION MESSAGE and CUSTOM VALIDATION FUNCTION</h5>\n<p>The validators property of a field could accept different nested properties which match with different validators.\nThe format would be:</p>\n<pre class="hljs">NAME_OF_VALIDATOR: {\n  expression: <span class="hljs-keyword">FUNCTION</span>\n  <span class="hljs-title">message:</span> <span class="hljs-keyword">FUNCTION</span> <span class="hljs-title">|</span> STRING\n}</pre><h5 id="field-with-custom-validation-2">FIELD WITH CUSTOM VALIDATION</h5>\n<p>As can be seen in the following code example, you just need to give a name to the validator property (ip), and include a function within expression property and a string or a custom message function withing message property.</p>\n<pre class="hljs">{\n  key: <span class="hljs-string">&apos;ip&apos;</span>,\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n  templateOptions: {\n    label: <span class="hljs-string">&apos;IP Address (using custom validation through `validators.expression` property)&apos;</span>,\n    description: <span class="hljs-string">&apos;custom validation message through `validators.expression` property&apos;</span>,\n    required: <span class="hljs-literal">true</span>,\n  },\n  validators: {\n    ip: {\n      expression: <span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> /(\\d{<span class="hljs-number">1</span>,<span class="hljs-number">3</span>}\\.){<span class="hljs-number">3</span>}\\d{<span class="hljs-number">1</span>,<span class="hljs-number">3</span>}/.test(c.value),\n      message: <span class="hljs-function">(<span class="hljs-params">error, field: FormlyFieldConfig</span>) =&gt;</span> <span class="hljs-string">`&quot;<span class="hljs-subst">${field.formControl.value}</span>&quot; is not a valid IP Address`</span>,\n    },\n  },\n},</pre>\n<p><strong>ALERT!</strong> If the function is async, you may need to define it in <code>asyncValidators</code> property:</p>\n<pre class="hljs">{\n  key: <span class="hljs-string">&apos;ip&apos;</span>,\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n  templateOptions: {\n    label: <span class="hljs-string">&apos;IP Address (using custom validation through `validators.expression` property)&apos;</span>,\n    description: <span class="hljs-string">&apos;custom validation message through `validators.expression` property&apos;</span>,\n    required: <span class="hljs-literal">true</span>,\n  },\n  asyncValidators: {\n    ip: {\n      expression: <span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n        setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n          resolve(<span class="hljs-regexp">/(\\d{1,3}\\.){3}\\d{1,3}/</span>.test(c.value));\n        }, <span class="hljs-number">1000</span>);\n      }),\n      message: <span class="hljs-function">(<span class="hljs-params">error, field: FormlyFieldConfig</span>) =&gt;</span> <span class="hljs-string">`&quot;<span class="hljs-subst">${field.formControl.value}</span>&quot; is not a valid IP Address`</span>,\n    },\n  },\n},</pre>\n<h4 id="4-declaring-validation-function-in-a-formly-type-and-message-within-ngmodule-declaration">4. Declaring validation function in a formly type and message within NgModule declaration.</h4>\n<h5 id="custom-validation-message-2">CUSTOM VALIDATION MESSAGE</h5>\n<p>Create a custom validation message as described in point 1.</p>\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">IpValidatorMessage</span>(<span class="hljs-params">err, field: FormlyFieldConfig</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`&quot;<span class="hljs-subst">${field.formControl.value}</span>&quot; is not a valid IP Address`</span>;\n}\n...\n<span class="hljs-meta">@NgModule</span>({\n  imports: [\n    ...\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: <span class="hljs-string">&apos;ip&apos;</span>, message: IpValidatorMessage },\n        { name: <span class="hljs-string">&apos;required&apos;</span>, message: <span class="hljs-string">&apos;This field is required&apos;</span> },\n      ],\n    }),\n  ]\n})</pre>\n<h5 id="custom-validation-function-used-on-a-formly-type">CUSTOM VALIDATION FUNCTION USED ON A FORMLY TYPE</h5>\n<p>The validation function receives the <code>FormControl</code> as input and it will return a boolean value, <code>false</code> if there is no error, otherwise <code>true</code>.</p>\n<p>The following code example shows a function to validate an IP. It has to return a boolean instead of a ValidationErrors object.</p>\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">IpValidator</span>(<span class="hljs-params">control: FormControl</span>): <span class="hljs-title">boolean</span> </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/(\\d{1,3}\\.){3}\\d{1,3}/</span>.test(control.value);\n}\n...\n<span class="hljs-meta">@NgModule</span>({\n  imports: [\n    ...\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: <span class="hljs-string">&apos;ip&apos;</span>, message: IpValidatorMessage },\n        { name: <span class="hljs-string">&apos;required&apos;</span>, message: <span class="hljs-string">&apos;This field is required&apos;</span> },\n      ],\n      types: [\n        {\n          name: <span class="hljs-string">&apos;ip&apos;</span>,\n          <span class="hljs-keyword">extends</span>: <span class="hljs-string">&apos;input&apos;</span>,\n          defaultOptions: {\n            validators: {\n              ip: IpValidator <span class="hljs-comment">// &apos;ip&apos; matches the ip validation message</span>\n            }\n          },\n        },\n    }),\n  ]\n})</pre>\n<h5 id="field-using-a-formly-type-with-custom-validation">FIELD USING A FORMLY TYPE WITH CUSTOM VALIDATION</h5>\n<p>The formly type has to be referenced in the field</p>\n<pre class="hljs">{\n  key: <span class="hljs-string">&apos;ip&apos;</span>,\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;ip&apos;</span>, <span class="hljs-comment">// the formly type defined</span>\n  templateOptions: {\n    label: <span class="hljs-string">&apos;IP Address (using custom validation declared in ngModule)&apos;</span>,\n    required: <span class="hljs-literal">true</span>,\n  },\n},</pre>\n<p>You could try the DEMO to test the several methods to create custom validators.</p>\n<ul>\n<li><a href="https://ngx-formly.github.io/ngx-formly/examples/validation/custom-validation">Custom Validators</a></li>\n<li><a href="https://ngx-formly.github.io/ngx-formly/examples/validation/unique-value-async-validation">Async Validators</a></li>\n</ul>\n'},FSOi:function(s,n){s.exports='<h1 id="formly-expressions">Formly Expressions</h1>\n<p>You can use <code>hideExpression</code> to hide fields dynamically and <code>Expression Properties</code> for allows you to dynamically change many properties of a field.</p>\n<h2 id="expression-properties">Expression Properties</h2>\n<p>Expression Properties allows you to dynamically change many properties of a field.\nFor example, you can disable a form field dynamically. The value of this property can be <code>string or function</code>.\nyou can see an example using string value <a href="https://stackblitz.com/edit/angular-formly-eehxjb?file=app/app.component.ts">here</a></p>\n<pre class="hljs">{\n  key: <span class="hljs-string">&apos;text2&apos;</span>,\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n  templateOptions: {\n    label: <span class="hljs-string">&apos;Hey!&apos;</span>,\n    placeholder: <span class="hljs-string">&apos;This one is disabled if there is no text in the other input&apos;</span>,\n  },\n  expressionProperties: {\n    <span class="hljs-string">&apos;templateOptions.disabled&apos;</span>: <span class="hljs-string">&apos;!model.text&apos;</span>,\n  },\n},</pre>\n<p>The field will be hidden when <em>model.text</em> is empty</p>\n<p>Example with function value:</p>\n<pre class="hljs">{\n  key: <span class="hljs-string">&apos;country&apos;</span>,\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n  templateOptions: {\n    label: <span class="hljs-string">&apos;field 2&apos;</span>,\n    placeholder: <span class="hljs-string">&apos;&apos;</span>\n  },\n  expressionProperties: {\n    <span class="hljs-string">&apos;templateOptions.disabled&apos;</span>: <span class="hljs-function">(<span class="hljs-params">model: <span class="hljs-built_in">any</span>, formState: <span class="hljs-built_in">any</span>, field: FormlyFieldConfig</span>) =&gt;</span> {\n      <span class="hljs-comment">// access to the main model can be through `this.model` or `formState` or `model</span>\n      <span class="hljs-keyword">return</span> !formState.mainModel.text\n    },\n  }\n}</pre>\n<p>The field will be hidden when <em>formState.mainModel.text</em> is empty</p>\n<p><strong>ALERT</strong>: You can use the formstate to store information. In the example we keep the model. formstate is a property of options. <a href="https://ngx-formly.github.io/ngx-formly/examples/form-options/form-state">Read more</a></p>\n<pre class="hljs">options = {\n  formState: {\n    mainModel: <span class="hljs-keyword">this</span>.model,\n  },\n};</pre>\n<h2 id="conditional-rendering">Conditional Rendering</h2>\n<p>HideExpression property is used to set the hide property of your field. The value of this property can be <code>string, function or boolean</code>. Below is an example of each of them.</p>\n<p>First option with <em>string value</em>:</p>\n<p>You can see an example with <a href="https://stackblitz.com/edit/angular-formly-f79kb3?file=app/app.component.ts">here</a></p>\n<pre class="hljs">{\n  key: <span class="hljs-string">&apos;iLikeTwix&apos;</span>,\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;checkbox&apos;</span>,\n  templateOptions: {\n    label: <span class="hljs-string">&apos;I like twix&apos;</span>,\n  },\n  hideExpression: <span class="hljs-string">&apos;!model.name&apos;</span>,\n}</pre>\n<p>Second option with <em>function valu</em>e:</p>\n<p>You can see an example <a href="https://stackblitz.com/edit/angular-formly-ndfcmz?file=app/app.component.ts">here</a></p>\n<pre class="hljs">{\n  key: <span class="hljs-string">&apos;country&apos;</span>,\n  <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n  templateOptions: {\n    label: <span class="hljs-string">&apos;City&apos;</span>,\n    placeholder: <span class="hljs-string">&apos;set to 123&apos;</span>\n  },\n  hideExpression: <span class="hljs-function">(<span class="hljs-params">model: <span class="hljs-built_in">any</span>, formState: <span class="hljs-built_in">any</span>, field: FormlyFieldConfig</span>) =&gt;</span> {\n    <span class="hljs-comment">// access to the main model can be through `this.model` or `formState` or `model</span>\n    <span class="hljs-keyword">if</span> (formState.mainModel &amp;&amp; formState.mainModel.city) {\n      <span class="hljs-keyword">return</span> formState.mainModel.city !== <span class="hljs-string">&quot;123&quot;</span>\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\n  },\n},</pre>\n<p>Third option with boolean.  You can see an example <a href="https://stackblitz.com/edit/angular-formly-dpyzb9?file=app/app.component.ts">here</a></p>\n<p>HTML</p>\n<pre class="hljs"><code>&lt;button (click)=&quot;toggle()&quot;&gt;Click me&lt;/button&gt;</code></pre>\n<p>TS</p>\n<pre class="hljs">fields: FormlyFieldConfig[] = [\n  {\n    key: <span class="hljs-string">&apos;country&apos;</span>,\n    <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n    templateOptions: {\n      label: <span class="hljs-string">&apos;Street&apos;</span>,\n      placeholder: <span class="hljs-string">&apos;&apos;</span>\n    },\n    hideExpression: <span class="hljs-keyword">this</span>.show\n  },\n];\n\ntoggle(){\n  <span class="hljs-keyword">this</span>.show = !<span class="hljs-keyword">this</span>.show;\n  <span class="hljs-keyword">this</span>.fields[<span class="hljs-number">1</span>].hideExpression = <span class="hljs-keyword">this</span>.show;\n}</pre>\n'},MWVK:function(s,n){s.exports='<div align="center">\n  <img src="https://raw.githubusercontent.com/formly-js/angular-formly/master/other/logo/angular-formly-logo-64px.png">\n  <br>\n  JSON powered / Dynamic forms in Angular\n  <br><br>\n\n<p>  <a href="https://npmjs.org/package/@ngx-formly/core"><img src="https://badge.fury.io/js/%40ngx-formly%2Fcore.svg" alt="Npm version"></a>\n  <a href="https://npmjs.org/package/@ngx-formly/core"><img src="http://img.shields.io/npm/dm/@ngx-formly/core.svg" alt="Downloads"></a>\n  <a href="https://gitter.im/formly-js/ng2-formly"><img src="https://badges.gitter.im/formly-js/ng2-formly.svg" alt="Gitter"></a>\n  <a href="https://api.travis-ci.org/ngx-formly/ngx-formly.svg?branch=master"><img src="https://api.travis-ci.org/ngx-formly/ngx-formly.svg?branch=master" alt="Build Status"></a></p>\n</div>\n\n<hr>\n<h1 id="ngx-formly">@ngx-formly</h1>\n<p>Ngx Formly is a dynamic JSON powered form library for Angular (mainly based an on <a href="https://angular.io/guide/reactive-forms">Angular Reactive Forms</a>) that bring unmatched maintainability to your application&apos;s forms.</p>\n<p><strong>Supported UI libs</strong></p>\n<table>\n<thead>\n<tr>\n<th>UI</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href="https://getbootstrap.com">Bootstrap</a></td>\n<td><a href="https://ngx-formly.github.io/ngx-formly/ui/bootstrap">Demo</a></td>\n<td><a href="https://stackblitz.com/edit/ngx-formly-ui-bootstrap">StackBlitz</a></td>\n</tr>\n<tr>\n<td><a href="https://github.com/angular/material2">Material2</a></td>\n<td><a href="https://ngx-formly.github.io/ngx-formly/ui/material">Demo</a></td>\n<td><a href="https://stackblitz.com/edit/ngx-formly-ui-material">StackBlitz</a></td>\n</tr>\n<tr>\n<td><a href="https://ionicframework.com">Ionic</a></td>\n<td><a href="https://ngx-formly.github.io/ngx-formly/ui/ionic">Demo</a></td>\n<td><a href="https://stackblitz.com/edit/ngx-formly-ui-ionic">StackBlitz</a></td>\n</tr>\n<tr>\n<td><a href="http://primefaces.org/primeng/#/">PrimeNG</a></td>\n<td><a href="https://ngx-formly.github.io/ngx-formly/ui/primeng">Demo</a></td>\n<td><a href="https://stackblitz.com/edit/ngx-formly-ui-primeng">StackBlitz</a></td>\n</tr>\n<tr>\n<td><a href="http://www.telerik.com/kendo-angular-ui">Kendo</a></td>\n<td><a href="https://ngx-formly.github.io/ngx-formly/ui/kendo">Demo</a></td>\n<td><a href="https://stackblitz.com/edit/ngx-formly-ui-kendo">StackBlitz</a></td>\n</tr>\n<tr>\n<td><a href="https://www.nativescript.org">NativeScript</a></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>Which Version to use?</strong></p>\n<table>\n<thead>\n<tr>\n<th>Angular version</th>\n<th>Formly version</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Angular &gt;= 7</td>\n<td><code>@ngx-formly/core@5.x</code></td>\n</tr>\n<tr>\n<td>Angular &gt;= 6</td>\n<td><code>@ngx-formly/core@4.x</code></td>\n</tr>\n<tr>\n<td>Angular &gt;= 5</td>\n<td><code>@ngx-formly/core@3.x</code></td>\n</tr>\n<tr>\n<td>Angular &gt;= 4</td>\n<td><code>@ngx-formly/core@2.x</code></td>\n</tr>\n<tr>\n<td>Angular &gt;= 2</td>\n<td><code>ng-formly@1.x</code></td>\n</tr>\n</tbody></table>\n<h4 id="quick-links">Quick links</h4>\n<ul>\n<li><a href="https://ngx-formly.github.io/ngx-formly">Documentation, demos, and guides</a></li>\n</ul>\n<h2 id="quick-start">Quick Start</h2>\n<p>Follow these steps to get started with Ngx Formly. Also check out our <a href="https://ngx-formly.github.io/ngx-formly">demos</a> for further examples.</p>\n<h4 id="1-install-angularforms-and-ngx-formlycore-packages">1. Install @angular/forms and @ngx-formly/core packages:</h4>\n<pre class="hljs"><code>  npm install @angular/forms @ngx-formly/core --save</code></pre>\n<h4 id="2-choose-and-install-your-ui-pre-defined-typestemplates-package">2. Choose and install your UI (pre-defined types/templates) package:</h4>\n<table>\n<thead>\n<tr>\n<th>UI</th>\n<th>Npm package name</th>\n<th>NgModule</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href="https://getbootstrap.com">Bootstrap</a></td>\n<td><code>@ngx-formly/bootstrap</code></td>\n<td><code>FormlyBootstrapModule</code></td>\n</tr>\n<tr>\n<td><a href="https://github.com/angular/material2">Material2</a></td>\n<td><code>@ngx-formly/material</code></td>\n<td><code>FormlyMaterialModule</code></td>\n</tr>\n<tr>\n<td><a href="https://ionicframework.com">Ionic</a></td>\n<td><code>@ngx-formly/ionic</code></td>\n<td><code>FormlyIonicModule</code></td>\n</tr>\n<tr>\n<td><a href="http://primefaces.org/primeng/#/">PrimeNG</a></td>\n<td><code>@ngx-formly/primeng</code></td>\n<td><code>FormlyPrimeNGModule</code></td>\n</tr>\n<tr>\n<td><a href="http://www.telerik.com/kendo-angular-ui">Kendo</a></td>\n<td><code>@ngx-formly/kendo</code></td>\n<td><code>FormlyKendoModule</code></td>\n</tr>\n<tr>\n<td><a href="https://www.nativescript.org">NativeScript</a></td>\n<td><code>@ngx-formly/nativescript</code></td>\n<td><code>FormlyNativescriptModule</code></td>\n</tr>\n</tbody></table>\n<pre class="hljs"><code>  npm install @ngx-formly/&lt;package-name&gt; --save</code></pre>\n<h4 id="3-import-the-formlymodule-and-ui-pre-defined-typestemplates">3. Import the <code>FormlyModule</code> and UI (pre-defined types/templates):</h4>\n<pre class="hljs"><span class="hljs-keyword">import</span> {NgModule} <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@angular/core&apos;</span>;\n<span class="hljs-keyword">import</span> {ReactiveFormsModule} <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@angular/forms&apos;</span>;\n<span class="hljs-keyword">import</span> {FormlyModule} <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@ngx-formly/core&apos;</span>;\n\n<span class="hljs-comment">/**\n * - Bootstrap:     import {FormlyBootstrapModule} from &apos;@ngx-formly/bootstrap&apos;;\n * - Material2:     import {FormlyMaterialModule} from &apos;@ngx-formly/material&apos;;\n * - Ionic:         import {FormlyIonicModule} from &apos;@ngx-formly/ionic&apos;\n * - PrimeNG:       import {FormlyPrimeNGModule} from &apos;@ngx-formly/primeng&apos;;\n * - Kendo:         import {FormlyKendoModule} from &apos;@ngx-formly/kendo&apos;;\n * - NativeScript:  import {FormlyNativescriptModule} from &apos;@ngx-formly/nativescript&apos;;\n */</span>\n<span class="hljs-keyword">import</span> {FormlyBootstrapModule} <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@ngx-formly/bootstrap&apos;</span>;\n\n<span class="hljs-meta">@NgModule</span>({\n  imports: [\n    ...,\n    ReactiveFormsModule,\n    FormlyModule.forRoot(),\n\n    <span class="hljs-comment">/**\n     * - Bootstrap:    FormlyBootstrapModule\n     * - Material2:    FormlyMaterialModule\n     * - Ionic:        FormlyIonicModule\n     * - PrimeNG:      FormlyPrimeNGModule\n     * - Kendo:        FormlyKendoModule\n     * - NativeScript: FormlyNativescriptModule\n     */</span>\n    FormlyBootstrapModule,\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppModule {}</pre>\n<h4 id="4-define-the-form-config-in-your-component">4. Define the form config in your component:</h4>\n<pre class="hljs"><span class="hljs-keyword">import</span> {Component} <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@angular/core&apos;</span>;\n<span class="hljs-keyword">import</span> {FormGroup} <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@angular/forms&apos;</span>;\n<span class="hljs-keyword">import</span> {FormlyFieldConfig} <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@ngx-formly/core&apos;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">&apos;app&apos;</span>,\n  template: <span class="hljs-string">`\n    &lt;form [formGroup]=&quot;form&quot; (ngSubmit)=&quot;submit(model)&quot;&gt;\n      &lt;formly-form [form]=&quot;form&quot; [fields]=&quot;fields&quot; [model]=&quot;model&quot;&gt;&lt;/formly-form&gt;\n      &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  `</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent {\n  form = <span class="hljs-keyword">new</span> FormGroup({});\n  model = { email: <span class="hljs-string">&apos;email@gmail.com&apos;</span> };\n  fields: FormlyFieldConfig[] = [{\n    key: <span class="hljs-string">&apos;email&apos;</span>,\n    <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n    templateOptions: {\n      label: <span class="hljs-string">&apos;Email address&apos;</span>,\n      placeholder: <span class="hljs-string">&apos;Enter email&apos;</span>,\n      required: <span class="hljs-literal">true</span>,\n    }\n  }];\n\n  submit(model) {\n    <span class="hljs-built_in">console</span>.log(model);\n  }\n}</pre>\n<p>From there, it&apos;s just JavaScript. Allowing for DRY, maintainable, reusable forms.</p>\n<h2 id="using-with-angular-cli">Using with Angular-CLI</h2>\n<p><code>@ngx-formly/schematics</code> provides CLI commands for setting up a project and <em>eventually</em> generating other features (e.g. wrapper components).\nBuilt on top of Schematics, this tool integrates with the Angular CLI.</p>\n<h3 id="installation">Installation</h3>\n<p>Install <code>@ngx-formly/schematics</code> from npm:</p>\n<p><code>npm install @ngx-formly/schematics --save-dev</code></p>\n<h3 id="default-schematics-collection">Default Schematics Collection</h3>\n<p>To use <code>@ngx-formly/schematics</code> as the default collection in your Angular CLI project,\nadd it to your <code>angular.json</code>:</p>\n<pre class="hljs"><code>ng config cli.defaultCollection @ngx-formly/schematics</code></pre>\n<p>The <a href="src/schematics/src/collection.json">collection schema</a> defines the available schematics to run.</p>\n<p>The <code>@ngx-formly/schematics</code> extend the default <code>@schematics/angular</code> collection and so all existing Angular CLI commands are available.\nIf you want to set defaults for schematics such as generating components with scss file, you must change the schematics package name from <code>@schematics/angular</code> to <code>@ngx-formly/schematics</code> in <code>angular.json</code>:</p>\n<pre class="hljs">&quot;schematics&quot;: {\n  &quot;@ngx-formly/schematics:component&quot;: {\n    &quot;styleext&quot;: &quot;scss&quot;\n  }\n}</pre>\n<h3 id="quick-start-with-schematics">Quick Start with Schematics</h3>\n<h4 id="install-angularforms-and-ngx-formlycore-packages-and-choose-a-ui-theme-to-install">Install @angular/forms and @ngx-formly/core packages and choose a UI theme to install:</h4>\n<pre class="hljs"><code>  ng add @ngx-formly/schematics --ui-theme=material</code></pre>\n<h2 id="roadmap">Roadmap</h2>\n<p>See the <a href="https://github.com/ngx-formly/ngx-formly/labels/enhancement">issues labeled enhancement</a></p>\n<h2 id="credits">Credits</h2>\n<ul>\n<li><a href="https://github.com/aitboudad">Abdellatif Ait boudad</a></li>\n<li><a href="https://twitter.com/mohamedzamakhan">Mohammed Zama Khan</a></li>\n<li><a href="https://twitter.com/kentcdodds">Kent C. Dodds</a></li>\n<li><a href="https://github.com/ngx-formly/ngx-formly/graphs/contributors">All contributors</a>!</li>\n</ul>\n<h2 id="contributors">Contributors</h2>\n<p>Thanks goes to these wonderful people (<a href="https://github.com/kentcdodds/all-contributors#emoji-key">emoji key</a>):</p>\n\x3c!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --\x3e\n<p><a href="https://github.com/aitboudad"><img alt="aitboudad" src="https://avatars2.githubusercontent.com/u/1753742?v=4&amp;s=117" width="117"></a><a href="https://github.com/mohammedzamakhan"><img alt="mohammedzamakhan" src="https://avatars3.githubusercontent.com/u/2327532?v=4&amp;s=117" width="117"></a><a href="https://github.com/divyakumarjain"><img alt="divyakumarjain" src="https://avatars2.githubusercontent.com/u/2039134?v=4&amp;s=117" width="117"></a><a href="https://github.com/couzic"><img alt="couzic" src="https://avatars2.githubusercontent.com/u/1380322?v=4&amp;s=117" width="117"></a><a href="https://github.com/franzeal"><img alt="franzeal" src="https://avatars3.githubusercontent.com/u/7455769?v=4&amp;s=117" width="117"></a><a href="https://github.com/juristr"><img alt="juristr" src="https://avatars3.githubusercontent.com/u/542458?v=4&amp;s=117" width="117"></a></p>\n<p><a href="https://github.com/beeman"><img alt="beeman" src="https://avatars3.githubusercontent.com/u/36491?v=4&amp;s=117" width="117"></a><a href="https://github.com/samtsai"><img alt="samtsai" src="https://avatars0.githubusercontent.com/u/225526?v=4&amp;s=117" width="117"></a><a href="https://github.com/klemenoslaj"><img alt="klemenoslaj" src="https://avatars2.githubusercontent.com/u/7548247?v=4&amp;s=117" width="117"></a><a href="https://github.com/thorgod"><img alt="thorgod" src="https://avatars3.githubusercontent.com/u/13910170?v=4&amp;s=117" width="117"></a><a href="https://github.com/dwaldrum"><img alt="dwaldrum" src="https://avatars2.githubusercontent.com/u/386721?v=4&amp;s=117" width="117"></a><a href="https://github.com/Krustie101"><img alt="Krustie101" src="https://avatars2.githubusercontent.com/u/1636728?v=4&amp;s=117" width="117"></a></p>\n<p><a href="https://github.com/MarcosEllys"><img alt="MarcosEllys" src="https://avatars3.githubusercontent.com/u/6751242?v=4&amp;s=117" width="117"></a><a href="https://github.com/Devqon"><img alt="Devqon" src="https://avatars3.githubusercontent.com/u/9316480?v=4&amp;s=117" width="117"></a><a href="https://github.com/AlexTalcura"><img alt="AlexTalcura" src="https://avatars2.githubusercontent.com/u/20095773?v=4&amp;s=117" width="117"></a><a href="https://github.com/bhaidar"><img alt="bhaidar" src="https://avatars0.githubusercontent.com/u/1163421?v=4&amp;s=117" width="117"></a><a href="https://github.com/Dayvisson"><img alt="Dayvisson" src="https://avatars1.githubusercontent.com/u/12189515?v=4&amp;s=117" width="117"></a><a href="https://github.com/n3xus"><img alt="n3xus" src="https://avatars0.githubusercontent.com/u/510213?v=4&amp;s=117" width="117"></a></p>\n<p><a href="https://github.com/jrgleason"><img alt="jrgleason" src="https://avatars3.githubusercontent.com/u/1319151?v=4&amp;s=117" width="117"></a><a href="https://github.com/jdpnielsen"><img alt="jdpnielsen" src="https://avatars3.githubusercontent.com/u/8746698?v=4&amp;s=117" width="117"></a><a href="https://github.com/TheMcMurder"><img alt="TheMcMurder" src="https://avatars1.githubusercontent.com/u/3059715?v=4&amp;s=117" width="117"></a><a href="https://github.com/kenisteward"><img alt="kenisteward" src="https://avatars3.githubusercontent.com/u/12831669?v=4&amp;s=117" width="117"></a><a href="https://github.com/kentcdodds"><img alt="kentcdodds" src="https://avatars0.githubusercontent.com/u/1500684?v=4&amp;s=117" width="117"></a><a href="https://github.com/LennardWesterveld"><img alt="LennardWesterveld" src="https://avatars2.githubusercontent.com/u/1076589?v=4&amp;s=117" width="117"></a></p>\n<p><a href="https://github.com/waffle-iron"><img alt="waffle-iron" src="https://avatars2.githubusercontent.com/u/6912981?v=4&amp;s=117" width="117"></a><a href="https://github.com/NanFengCheong"><img alt="NanFengCheong" src="https://avatars2.githubusercontent.com/u/7321833?v=4&amp;s=117" width="117"></a><a href="https://github.com/Pouja"><img alt="Pouja" src="https://avatars3.githubusercontent.com/u/2385144?v=4&amp;s=117" width="117"></a><a href="https://github.com/Riron"><img alt="Riron" src="https://avatars3.githubusercontent.com/u/5145523?v=4&amp;s=117" width="117"></a><a href="https://github.com/Ronen-dev"><img alt="Ronen-dev" src="https://avatars3.githubusercontent.com/u/12510911?v=4&amp;s=117" width="117"></a><a href="https://github.com/blowsie"><img alt="blowsie" src="https://avatars2.githubusercontent.com/u/308572?v=4&amp;s=117" width="117"></a></p>\n<p><a href="https://github.com/thm1118"><img alt="thm1118" src="https://avatars0.githubusercontent.com/u/3632180?v=4&amp;s=117" width="117"></a><a href="https://github.com/Tom-V"><img alt="Tom-V" src="https://avatars2.githubusercontent.com/u/322654?v=4&amp;s=117" width="117"></a><a href="https://github.com/danielcrisp"><img alt="danielcrisp" src="https://avatars1.githubusercontent.com/u/1104814?v=4&amp;s=117" width="117"></a><a href="https://github.com/francisco-sanchez-molina"><img alt="francisco-sanchez-molina" src="https://avatars3.githubusercontent.com/u/9049706?v=4&amp;s=117" width="117"></a><a href="https://github.com/enricouniurb"><img alt="enricouniurb" src="https://avatars1.githubusercontent.com/u/38656571?v=4&amp;s=117" width="117"></a></p>\n\x3c!-- ALL-CONTRIBUTORS-LIST:END --\x3e\n'},NJ9T:function(s,n,a){"use strict";a.r(n);var t=a("CcnG"),e=function(){return function(){}}(),o=a("NcP4"),l=a("AcC/"),p=a("htty"),r=a("pMnS"),i=a("Ip0R"),d=function(){return function(s){this.route=s,this.contents={"getting-started":a("MWVK"),"properties-options":a("AVrm"),"custom-formly-field":a("wNjz"),"custom-formly-wrapper":a("tTQn"),validation:a("Dthz"),"expression-properties":a("FSOi")}}}(),c=a("ZYCi"),h=t["\u0275crt"]({encapsulation:2,styles:[],data:{}});function m(s){return t["\u0275vid"](0,[(s()(),t["\u0275eld"](0,0,null,null,0,"div",[],[[8,"innerHTML",1]],null,null,null,null))],null,function(s,n){s(n,0,0,n.component.contents[n.context.ngIf.id])})}function u(s){return t["\u0275vid"](0,[(s()(),t["\u0275eld"](0,0,null,null,3,"div",[["class","markdown github"]],null,null,null,null,null)),(s()(),t["\u0275and"](16777216,null,null,2,null,m)),t["\u0275did"](2,16384,null,0,i.NgIf,[t.ViewContainerRef,t.TemplateRef],{ngIf:[0,"ngIf"]},null),t["\u0275pid"](131072,i.AsyncPipe,[t.ChangeDetectorRef])],function(s,n){var a=n.component;s(n,2,0,t["\u0275unv"](n,2,0,t["\u0275nov"](n,3).transform(a.route.params)))},null)}function g(s){return t["\u0275vid"](0,[(s()(),t["\u0275eld"](0,0,null,null,1,"formly-demo-examples",[],null,null,null,u,h)),t["\u0275did"](1,49152,null,0,d,[c.a],null,null)],null,null)}var f=t["\u0275ccf"]("formly-demo-examples",d,g,{},{},[]),y=a("M2Lx"),j=a("eDkP"),w=a("Fzqc"),b=a("v9Dh"),v=a("ZYjt"),k=a("Wf4p"),x=a("6LlJ"),F=a("F6kA"),M=a("dWZg"),C=a("lLAP"),I=a("4c35"),T=a("qAlS"),A=a("La40"),q=a("SMsm"),N=a("UodH"),S=a("5QwG"),O=a("XR12"),V=a("DAbo"),D=a("Nsh5"),R=a("8mMr"),E=a("mqvi");a.d(n,"GuidesModuleNgFactory",function(){return L});var L=t["\u0275cmf"](e,[],function(s){return t["\u0275mod"]([t["\u0275mpd"](512,t.ComponentFactoryResolver,t["\u0275CodegenComponentFactoryResolver"],[[8,[o.a,l.a,p.a,r.a,f]],[3,t.ComponentFactoryResolver],t.NgModuleRef]),t["\u0275mpd"](4608,i.NgLocalization,i.NgLocaleLocalization,[t.LOCALE_ID,[2,i["\u0275angular_packages_common_common_a"]]]),t["\u0275mpd"](4608,y.c,y.c,[]),t["\u0275mpd"](4608,j.c,j.c,[j.i,j.e,t.ComponentFactoryResolver,j.h,j.f,t.Injector,t.NgZone,i.DOCUMENT,w.b,[2,i.Location]]),t["\u0275mpd"](5120,j.j,j.k,[j.c]),t["\u0275mpd"](5120,b.b,b.c,[j.c]),t["\u0275mpd"](4608,v.HAMMER_GESTURE_CONFIG,k.c,[[2,k.g],[2,k.l]]),t["\u0275mpd"](4608,x.a,x.a,[]),t["\u0275mpd"](4608,F.a,F.a,[]),t["\u0275mpd"](1073742336,i.CommonModule,i.CommonModule,[]),t["\u0275mpd"](1073742336,M.b,M.b,[]),t["\u0275mpd"](1073742336,y.d,y.d,[]),t["\u0275mpd"](1073742336,C.a,C.a,[]),t["\u0275mpd"](1073742336,w.a,w.a,[]),t["\u0275mpd"](1073742336,I.g,I.g,[]),t["\u0275mpd"](1073742336,T.c,T.c,[]),t["\u0275mpd"](1073742336,j.g,j.g,[]),t["\u0275mpd"](1073742336,k.l,k.l,[[2,k.d],[2,v.HAMMER_LOADER]]),t["\u0275mpd"](1073742336,b.e,b.e,[]),t["\u0275mpd"](1073742336,k.v,k.v,[]),t["\u0275mpd"](1073742336,A.j,A.j,[]),t["\u0275mpd"](1073742336,q.c,q.c,[]),t["\u0275mpd"](1073742336,N.c,N.c,[]),t["\u0275mpd"](1073742336,S.b,S.b,[]),t["\u0275mpd"](1073742336,O.a,O.a,[V.b,[2,V.a]]),t["\u0275mpd"](1073742336,D.h,D.h,[]),t["\u0275mpd"](1073742336,R.b,R.b,[]),t["\u0275mpd"](1073742336,E.a,E.a,[]),t["\u0275mpd"](1073742336,c.s,c.s,[[2,c.y],[2,c.p]]),t["\u0275mpd"](1073742336,e,e,[]),t["\u0275mpd"](1024,c.n,function(){return[[{path:"",pathMatch:"full",redirectTo:"getting-started"},{path:":id",component:d}]]},[])])})},tTQn:function(s,n){s.exports='<h1 id="custom-wrapper">Custom Wrapper</h1>\n<p>Custom wrappers allows you to wrap a field type with a component.</p>\n<h2 id="prebuilt-wrappers">Prebuilt Wrappers</h2>\n<p>ui-bootstrap</p>\n<ul>\n<li>form-field<ul>\n<li>Shows validation messages bellow field.</li>\n</ul>\n</li>\n<li>addons</li>\n</ul>\n<p>ui-ionic</p>\n<ul>\n<li>form-field<ul>\n<li>Shows validation messages bellow field.</li>\n</ul>\n</li>\n</ul>\n<p>ui-kendo</p>\n<ul>\n<li>form-field<ul>\n<li>Shows validation messages and label for required.</li>\n</ul>\n</li>\n</ul>\n<p>ui-material</p>\n<ul>\n<li>form-field<ul>\n<li>Has label, shows validation messages, shows description, and label for required.</li>\n</ul>\n</li>\n</ul>\n<p>ui-primeng</p>\n<ul>\n<li>form-field<ul>\n<li>Has label, required and validation message.</li>\n</ul>\n</li>\n</ul>\n<h2 id="creating-a-custom-wrapper">Creating a Custom Wrapper</h2>\n<p>Creating a custom wrapper is easy, the following example shows how to create a panel wrapper around a field.</p>\n<p>See live demo: <a href="https://stackblitz.com/angular/dleylnmrbmd?file=app%2Fapp.component.ts">demo</a></p>\n<ol>\n<li><p>Defining the Custom Wrapper class and it&apos;s template:</p>\n<p>First you have to create a component representing the wrapper which extends <code>FieldWrapper</code> class.</p>\n<pre class="hljs"><span class="hljs-comment">// panel-wrapper.component.ts</span>\n<span class="hljs-keyword">import</span> { Component, ViewChild, ViewContainerRef } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@angular/core&apos;</span>;\n<span class="hljs-keyword">import</span> { FieldWrapper } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@ngx-formly/core&apos;</span>;\n\n<span class="hljs-meta">@Component</span>({\nselector: <span class="hljs-string">&apos;formly-wrapper-panel&apos;</span>,\ntemplate: <span class="hljs-string">`\n &lt;div class=&quot;card&quot;&gt;\n   &lt;h3 class=&quot;card-header&quot;&gt;Its time to party&lt;/h3&gt;\n   &lt;h3 class=&quot;card-header&quot;&gt;{{ to.label }}&lt;/h3&gt;\n   &lt;div class=&quot;card-body&quot;&gt;\n     &lt;ng-container #fieldComponent&gt;&lt;/ng-container&gt;\n   &lt;/div&gt;\n &lt;/div&gt;\n`</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> PanelWrapperComponent <span class="hljs-keyword">extends</span> FieldWrapper {\n<span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">&apos;fieldComponent&apos;</span>, {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n}</pre>\n<p><code>fieldComponent</code> is where the field is inserted.  (<code>&lt;ng-container #fieldComponent&gt;&lt;/ng-container&gt;</code>)</p>\n<blockquote>\n<p>Note: <code>FieldWrapper</code> component extends <code>Field</code> therefore you can have multiple wrappers attached to one field.\nExample you can have both a label and validator wrapper.</p>\n</blockquote>\n</li>\n<li><p>Register the custom wrapper in <code>NgModule</code> declaration:\nModule</p>\n<pre class="hljs"><span class="hljs-keyword">import</span> { NgModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@angular/core&apos;</span>;\n<span class="hljs-keyword">import</span> { CommonModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@angular/common&apos;</span>;\n<span class="hljs-keyword">import</span> { ReactiveFormsModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@angular/forms&apos;</span>;\n<span class="hljs-keyword">import</span> { FormlyModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@ngx-formly/core&apos;</span>;\n<span class="hljs-keyword">import</span> { FormlyBootstrapModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@ngx-formly/bootstrap&apos;</span>;\n\n<span class="hljs-keyword">import</span> { PanelWrapperComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;./panel-wrapper.component&apos;</span>;\n<span class="hljs-keyword">import</span> { AppComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;./app.component&apos;</span>;\n\n<span class="hljs-meta">@NgModule</span>({\nimports: [\n CommonModule,\n ReactiveFormsModule,\n FormlyBootstrapModule,\n FormlyModule.forRoot({\n   wrappers: [\n     { name: <span class="hljs-string">&apos;panel&apos;</span>, component: PanelWrapperComponent },\n   ],\n }),\n],\ndeclarations: [\n AppComponent,\n PanelWrapperComponent,\n],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppModule { }</pre>\n<p><code>wrappers: [ ... ]</code> is where define what custom wrappers we want to inject into our module to use in our <code>FormlyFieldConfig</code></p>\n</li>\n<li><p>Create a custom FormlyFieldConfig that uses that type.</p>\n<pre class="hljs">fields: FormlyFieldConfig[] = [\n{\n key: <span class="hljs-string">&apos;address&apos;</span>,\n wrappers: [<span class="hljs-string">&apos;panel&apos;</span>],\n templateOptions: { label: <span class="hljs-string">&apos;Address&apos;</span> },\n fieldGroup: [{\n   key: <span class="hljs-string">&apos;town&apos;</span>,\n   <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n   templateOptions: {\n     required: <span class="hljs-literal">true</span>,\n     <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;text&apos;</span>,\n     label: <span class="hljs-string">&apos;Town&apos;</span>,\n   },\n }],\n},\n];\n</pre>\n<p><code>wrappers: [&apos;panel&apos;],</code> is where FormlyFieldConfig assigns the field instance to use that panel.</p>\n</li>\n</ol>\n<h2 id="creating-default-wrappers-for-components">Creating default wrappers for components</h2>\n<p>Sometimes you always want a components with certain wrappers.</p>\n<pre class="hljs">  ... <span class="hljs-comment">//Imports</span>\n  <span class="hljs-meta">@NgModule</span>({\n    imports: [\n      CommonModule,\n      ReactiveFormsModule,\n      FormlyBootstrapModule,\n      FormlyModule.forRoot({\n        types: [\n          {\n            name: <span class="hljs-string">&apos;operator&apos;</span>,\n            component: OperatorComponent,\n            wrappers: [<span class="hljs-string">&apos;form-field&apos;</span>]\n          },\n        ],\n      }),\n    ],\n    declarations: [\n      AppComponent,\n      OperatorComponent\n    ],\n  })\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppModule { }</pre>\n<p>You can do this by setting the <code>wrappers: [&apos;form-field&apos;]</code> to that type in the module</p>\n'},wNjz:function(s,n){s.exports='<h1 id="custom-templates">Custom Templates</h1>\n<h2 id="prebuilt-templates">Prebuilt Templates</h2>\n<p>While it is recommended to create your own templates for ultimate customization and flexibility,\nthere are prebuilt templates you can use:</p>\n<ul>\n<li>Material</li>\n<li>Bootstrap</li>\n<li>Ionic</li>\n<li>Kendo</li>\n<li>PrimeNG</li>\n</ul>\n<h2 id="creating-a-custom-template">Creating a Custom Template</h2>\n<p>Creating a custom template is quite easy, but also very flexible, the following example shows how we can create a simple input type:</p>\n<p>The live example can be found in stackblitz: <a href="https://stackblitz.com/edit/ngx-formly-custom-template">https://stackblitz.com/edit/ngx-formly-custom-template</a></p>\n<ol>\n<li><p>Defining the Field Type class and it&apos;s template:</p>\n<p>First you have to create a component representing the field which extends <code>FieldType</code> class.</p>\n<pre class="hljs"><span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@angular/core&apos;</span>;\n<span class="hljs-keyword">import</span> { FieldType } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;@ngx-formly/core&apos;</span>;\n\n<span class="hljs-meta">@Component</span>({\n selector: <span class="hljs-string">&apos;formly-field-input&apos;</span>,\n template: <span class="hljs-string">`\n   &lt;input type=&quot;input&quot; [formControl]=&quot;formControl&quot; [formlyAttributes]=&quot;field&quot;&gt;\n `</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> FormlyFieldInput <span class="hljs-keyword">extends</span> FieldType {}</pre>\n<p>We passed a <code>formControl</code> instance which is created by Formly, to let Formly know that this is the input that you want to associate with your model.</p>\n</li>\n<li><p>Register the custom type in <code>NgModule</code> declaration:</p>\n<pre class="hljs"><span class="hljs-keyword">import</span> { FormlyFieldInput } <span class="hljs-keyword">from</span> <span class="hljs-string">&apos;./formly-field-input&apos;</span>;\n\n<span class="hljs-meta">@NgModule</span>({\n declarations: [FormlyFieldInput],\n imports: [\n   ....\n   FormlyModule.forRoot({\n     types: [\n       { name: <span class="hljs-string">&apos;input&apos;</span>, component: FormlyFieldInput },\n     ],\n   }),\n ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppModule {}</pre>\n<p><code>types</code> allows you to specify a custom type which you can use in your field configuration.</p>\n<p>A typical Type require two properties:</p>\n<ol>\n<li><code>name</code>: The name of the template type. You use this in the <code>type</code> option of a field.</li>\n<li><code>component</code>: the component that Formly should create when this type is set.</li>\n</ol>\n</li>\n<li><p>Use the created custom type in the form config:</p>\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent {\n fields: FormlyFieldConfig[] = [\n   {\n     key: <span class="hljs-string">&apos;firstname&apos;</span>,\n     <span class="hljs-keyword">type</span>: <span class="hljs-string">&apos;input&apos;</span>,\n   },\n ];\n\n ...\n}</pre>\n</li>\n</ol>\n'}}]);